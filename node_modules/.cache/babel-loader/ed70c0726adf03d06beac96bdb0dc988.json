{"remainingRequest":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\src\\components\\Navbar\\Navbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\src\\components\\Navbar\\Navbar.vue","mtime":1715192479073},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\.babelrc","mtime":1715192465794},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\babel-loader\\lib\\index.js","mtime":1715192467870},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js","mtime":1715192477908}],"contextDependencies":[],"result":["import _defineProperty from \"C:/Users/PC/Desktop/Otros/DP1/Front/dp1_front-Redex/Redex/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { CollapseTransition } from 'vue2-transitions';\nimport NavbarToggleButton from \"./NavbarToggleButton\";\nvar resizeTimeout;\n\nfunction resizeThrottler(actualResizeHandler) {\n  // ignore resize events as long as an actualResizeHandler execution is in the queue\n  if (!resizeTimeout) {\n    resizeTimeout = setTimeout(function () {\n      resizeTimeout = null;\n      actualResizeHandler(); // The actualResizeHandler will execute at a rate of 15fps\n    }, 66);\n  }\n}\n\nexport default {\n  name: 'navbar',\n  props: {\n    transparent: {\n      type: Boolean,\n      default: false\n    },\n    position: {\n      type: String,\n      default: 'relative'\n    },\n    menuClasses: {\n      type: [String, Object, Array]\n    },\n    colorOnScroll: {\n      type: Number,\n      default: 0\n    },\n    type: {\n      type: String,\n      default: 'white',\n      validator: function validator(value) {\n        return ['white', 'default', 'primary', 'danger', 'success', 'warning', 'info'].includes(value);\n      }\n    },\n    navMenuClasses: {\n      type: String,\n      default: ''\n    },\n    menuImage: {\n      type: String\n    },\n    expand: {\n      type: [String, Boolean],\n      default: 'lg'\n    }\n  },\n  provide: function provide() {\n    return {\n      closeNavbar: this.close\n    };\n  },\n  components: {\n    CollapseTransition: CollapseTransition,\n    NavbarToggleButton: NavbarToggleButton\n  },\n  data: function data() {\n    return {\n      showMenu: false,\n      extraNavClasses: '',\n      currentScrollValue: 0\n    };\n  },\n  computed: {\n    slotData: function slotData() {\n      return {\n        toggle: this.toggle,\n        open: this.open,\n        close: this.close,\n        isToggled: this.showMenu\n      };\n    },\n    classes: function classes() {\n      var color = \"bg-\".concat(this.type);\n      var navPosition = \"navbar-\".concat(this.position);\n      var colorOnScrollTransparent = this.colorOnScroll && this.currentScrollValue < this.colorOnScroll;\n\n      if (this.position === 'fixed') {\n        navPosition = 'fixed-top';\n      }\n\n      return [{\n        'navbar-transparent': this.transparent || colorOnScrollTransparent\n      }, _defineProperty({}, color, !this.transparent && this.colorOnScroll === 0), this.expand ? \"navbar-expand-\".concat(this.expand) : '', navPosition, this.extraNavClasses];\n    }\n  },\n  methods: {\n    setNav: function setNav(value) {\n      var htmlClasses = document.querySelector('html').classList;\n\n      if (value) {\n        htmlClasses.add('nav-open');\n      } else {\n        htmlClasses.remove('nav-open');\n      }\n\n      var isOpen = htmlClasses.contains('nav-open');\n      var eventToTrigger = isOpen ? 'open' : 'close';\n      this.showMenu = isOpen;\n      this.$emit(eventToTrigger);\n    },\n    toggle: function toggle() {\n      this.setNav(!this.showMenu);\n    },\n    open: function open() {\n      this.setNav(true);\n    },\n    close: function close() {\n      if (this.showMenu) {\n        this.setNav(false);\n      }\n    },\n    handleScroll: function handleScroll() {\n      var scrollValue = document.body.scrollTop || document.documentElement.scrollTop;\n      this.currentScrollValue = scrollValue;\n\n      if (this.colorOnScroll > 0 && scrollValue > this.colorOnScroll) {\n        this.extraNavClasses = \"bg-\".concat(this.type);\n      } else {\n        if (this.extraNavClasses) {\n          this.extraNavClasses = '';\n        }\n      }\n    },\n    scrollListener: function scrollListener() {\n      resizeThrottler(this.handleScroll);\n    }\n  },\n  mounted: function mounted() {\n    document.addEventListener('scroll', this.scrollListener);\n  },\n  beforeDestroy: function beforeDestroy() {\n    document.removeEventListener('scroll', this.scrollListener);\n  }\n};",{"version":3,"sources":["Navbar.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <nav :class=\"classes\" class=\"navbar\">\r\n    <div class=\"container\">\r\n      <div class=\"navbar-translate\">\r\n        <slot v-bind=\"slotData\"></slot>\r\n        <navbar-toggle-button\r\n          :toggled=\"showMenu\"\r\n          @click.native.stop=\"toggle\"\r\n        ></navbar-toggle-button>\r\n      </div>\r\n      <div\r\n        class=\"navbar-collapse collapse\"\r\n        v-click-outside=\"close\"\r\n        :style=\"menuImage ? `background: url(${menuImage}) 0% 0% / cover;` : ''\"\r\n        :class=\"[\r\n          { show: showMenu },\r\n          { 'has-image': menuImage },\r\n          navMenuClasses\r\n        ]\"\r\n        v-if=\"$slots['navbar-menu'] || $scopedSlots['navbar-menu']\"\r\n        data-color=\"orange\"\r\n        id=\"navigation\"\r\n      >\r\n        <slot name=\"before-menu\"></slot>\r\n        <ul class=\"navbar-nav\" :class=\"menuClasses\">\r\n          <slot name=\"navbar-menu\" v-bind=\"slotData\"></slot>\r\n        </ul>\r\n        <slot name=\"after-menu\"></slot>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n</template>\r\n<script>\r\nimport { CollapseTransition } from 'vue2-transitions';\r\nimport NavbarToggleButton from './NavbarToggleButton';\r\nlet resizeTimeout;\r\nfunction resizeThrottler(actualResizeHandler) {\r\n  // ignore resize events as long as an actualResizeHandler execution is in the queue\r\n  if (!resizeTimeout) {\r\n    resizeTimeout = setTimeout(() => {\r\n      resizeTimeout = null;\r\n      actualResizeHandler();\r\n\r\n      // The actualResizeHandler will execute at a rate of 15fps\r\n    }, 66);\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: 'navbar',\r\n  props: {\r\n    transparent: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    position: {\r\n      type: String,\r\n      default: 'relative'\r\n    },\r\n    menuClasses: {\r\n      type: [String, Object, Array]\r\n    },\r\n    colorOnScroll: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: 'white',\r\n      validator(value) {\r\n        return [\r\n          'white',\r\n          'default',\r\n          'primary',\r\n          'danger',\r\n          'success',\r\n          'warning',\r\n          'info'\r\n        ].includes(value);\r\n      }\r\n    },\r\n    navMenuClasses: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    menuImage: {\r\n      type: String\r\n    },\r\n    expand: {\r\n      type: [String, Boolean],\r\n      default: 'lg'\r\n    }\r\n  },\r\n  provide() {\r\n    return {\r\n      closeNavbar: this.close\r\n    };\r\n  },\r\n  components: {\r\n    CollapseTransition,\r\n    NavbarToggleButton\r\n  },\r\n  data() {\r\n    return {\r\n      showMenu: false,\r\n      extraNavClasses: '',\r\n      currentScrollValue: 0\r\n    };\r\n  },\r\n  computed: {\r\n    slotData() {\r\n      return {\r\n        toggle: this.toggle,\r\n        open: this.open,\r\n        close: this.close,\r\n        isToggled: this.showMenu\r\n      };\r\n    },\r\n    classes() {\r\n      let color = `bg-${this.type}`;\r\n      let navPosition = `navbar-${this.position}`;\r\n      let colorOnScrollTransparent =\r\n        this.colorOnScroll && this.currentScrollValue < this.colorOnScroll;\r\n\r\n      if (this.position === 'fixed') {\r\n        navPosition = 'fixed-top';\r\n      }\r\n\r\n      return [\r\n        { 'navbar-transparent': this.transparent || colorOnScrollTransparent },\r\n        { [color]: !this.transparent && this.colorOnScroll === 0 },\r\n        this.expand ? `navbar-expand-${this.expand}` : '',\r\n        navPosition,\r\n        this.extraNavClasses\r\n      ];\r\n    }\r\n  },\r\n  methods: {\r\n    setNav(value) {\r\n      let htmlClasses = document.querySelector('html').classList;\r\n      if (value) {\r\n        htmlClasses.add('nav-open');\r\n      } else {\r\n        htmlClasses.remove('nav-open');\r\n      }\r\n      let isOpen = htmlClasses.contains('nav-open');\r\n      let eventToTrigger = isOpen ? 'open' : 'close';\r\n      this.showMenu = isOpen;\r\n      this.$emit(eventToTrigger);\r\n    },\r\n    toggle() {\r\n      this.setNav(!this.showMenu);\r\n    },\r\n    open() {\r\n      this.setNav(true);\r\n    },\r\n    close() {\r\n      if (this.showMenu) {\r\n        this.setNav(false);\r\n      }\r\n    },\r\n    handleScroll() {\r\n      let scrollValue =\r\n        document.body.scrollTop || document.documentElement.scrollTop;\r\n      this.currentScrollValue = scrollValue;\r\n      if (this.colorOnScroll > 0 && scrollValue > this.colorOnScroll) {\r\n        this.extraNavClasses = `bg-${this.type}`;\r\n      } else {\r\n        if (this.extraNavClasses) {\r\n          this.extraNavClasses = '';\r\n        }\r\n      }\r\n    },\r\n    scrollListener() {\r\n      resizeThrottler(this.handleScroll);\r\n    }\r\n  },\r\n  mounted() {\r\n    document.addEventListener('scroll', this.scrollListener);\r\n  },\r\n  beforeDestroy() {\r\n    document.removeEventListener('scroll', this.scrollListener);\r\n  }\r\n};\r\n</script>\r\n<style></style>\r\n"],"sourceRoot":"src/components/Navbar"}]}