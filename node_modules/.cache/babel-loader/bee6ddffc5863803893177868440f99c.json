{"remainingRequest":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-mapbox\\src\\components\\UI\\Marker.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-mapbox\\src\\components\\UI\\Marker.vue","mtime":1715192477961},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\babel-loader\\lib\\index.js","mtime":1715192467870},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js","mtime":1715192477908}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\nimport withEvents from \"../../lib/withEvents\";\nimport withSelfEvents from \"./withSelfEvents\";\nconst markerEvents = {\n  drag: \"drag\",\n  dragstart: \"dragstart\",\n  dragend: \"dragend\"\n};\nconst markerDOMEvents = {\n  click: \"click\",\n  mouseenter: \"mouseenter\",\n  mouseleave: \"mouseleave\"\n};\nexport default {\n  name: \"MapMarker\",\n  mixins: [withEvents, withSelfEvents],\n  inject: [\"mapbox\", \"map\"],\n\n  provide() {\n    const self = this;\n    return {\n      get marker() {\n        return self.marker;\n      }\n\n    };\n  },\n\n  props: {\n    // mapbox marker options\n    offset: {\n      type: [Object, Array],\n      default: () => [0, 0]\n    },\n    coordinates: {\n      type: Array,\n      required: true\n    },\n    color: {\n      type: String\n    },\n    anchor: {\n      type: String,\n      default: \"center\"\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      initial: true,\n      marker: undefined\n    };\n  },\n\n  watch: {\n    coordinates(lngLat) {\n      if (this.initial) return;\n      this.marker.setLngLat(lngLat);\n    },\n\n    draggable(next) {\n      if (this.initial) return;\n      this.marker.setDraggable(next);\n    }\n\n  },\n\n  mounted() {\n    const markerOptions = { ...this.$props\n    };\n\n    if (this.$slots.marker) {\n      markerOptions.element = this.$slots.marker[0].elm;\n    }\n\n    this.marker = new this.mapbox.Marker(markerOptions);\n\n    if (this.$listeners[\"update:coordinates\"]) {\n      this.marker.on(\"dragend\", event => {\n        let newCoordinates;\n\n        if (this.coordinates instanceof Array) {\n          newCoordinates = [event.target._lngLat.lng, event.target._lngLat.lat];\n        } else {\n          newCoordinates = event.target._lngLat;\n        }\n\n        this.$emit(\"update:coordinates\", newCoordinates);\n      });\n    }\n\n    const eventNames = Object.keys(markerEvents);\n    this.$_bindSelfEvents(eventNames, this.marker);\n    this.initial = false;\n    this.$_addMarker();\n  },\n\n  beforeDestroy() {\n    if (this.map !== undefined && this.marker !== undefined) {\n      this.marker.remove();\n    }\n  },\n\n  methods: {\n    $_addMarker() {\n      this.marker.setLngLat(this.coordinates).addTo(this.map);\n      this.$_bindMarkerDOMEvents();\n      this.$_emitEvent(\"added\", {\n        marker: this.marker\n      });\n    },\n\n    $_emitSelfEvent(event) {\n      this.$_emitMapEvent(event, {\n        marker: this.marker\n      });\n    },\n\n    $_bindMarkerDOMEvents() {\n      Object.keys(this.$listeners).forEach(key => {\n        if (Object.values(markerDOMEvents).includes(key)) {\n          this.marker._element.addEventListener(key, event => {\n            this.$_emitSelfEvent(event);\n          });\n        }\n      });\n    },\n\n    remove() {\n      this.marker.remove();\n      this.$_emitEvent(\"removed\");\n    },\n\n    togglePopup() {\n      return this.marker.togglePopup();\n    }\n\n  }\n};",{"version":3,"sources":["Marker.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div style=\"display: none\">\r\n    <!-- slot for custom marker -->\r\n    <slot name=\"marker\" />\r\n    <!-- slot for popup -->\r\n    <slot v-if=\"marker\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport withEvents from \"../../lib/withEvents\";\r\nimport withSelfEvents from \"./withSelfEvents\";\r\n\r\nconst markerEvents = {\r\n  drag: \"drag\",\r\n  dragstart: \"dragstart\",\r\n  dragend: \"dragend\"\r\n};\r\n\r\nconst markerDOMEvents = {\r\n  click: \"click\",\r\n  mouseenter: \"mouseenter\",\r\n  mouseleave: \"mouseleave\"\r\n};\r\n\r\nexport default {\r\n  name: \"MapMarker\",\r\n  mixins: [withEvents, withSelfEvents],\r\n\r\n  inject: [\"mapbox\", \"map\"],\r\n\r\n  provide() {\r\n    const self = this;\r\n    return {\r\n      get marker() {\r\n        return self.marker;\r\n      }\r\n    };\r\n  },\r\n\r\n  props: {\r\n    // mapbox marker options\r\n    offset: {\r\n      type: [Object, Array],\r\n      default: () => [0, 0]\r\n    },\r\n    coordinates: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    color: {\r\n      type: String\r\n    },\r\n    anchor: {\r\n      type: String,\r\n      default: \"center\"\r\n    },\r\n    draggable: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      initial: true,\r\n      marker: undefined\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    coordinates(lngLat) {\r\n      if (this.initial) return;\r\n      this.marker.setLngLat(lngLat);\r\n    },\r\n    draggable(next) {\r\n      if (this.initial) return;\r\n      this.marker.setDraggable(next);\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    const markerOptions = {\r\n      ...this.$props\r\n    };\r\n    if (this.$slots.marker) {\r\n      markerOptions.element = this.$slots.marker[0].elm;\r\n    }\r\n    this.marker = new this.mapbox.Marker(markerOptions);\r\n\r\n    if (this.$listeners[\"update:coordinates\"]) {\r\n      this.marker.on(\"dragend\", event => {\r\n        let newCoordinates;\r\n        if (this.coordinates instanceof Array) {\r\n          newCoordinates = [event.target._lngLat.lng, event.target._lngLat.lat];\r\n        } else {\r\n          newCoordinates = event.target._lngLat;\r\n        }\r\n        this.$emit(\"update:coordinates\", newCoordinates);\r\n      });\r\n    }\r\n\r\n    const eventNames = Object.keys(markerEvents);\r\n    this.$_bindSelfEvents(eventNames, this.marker);\r\n\r\n    this.initial = false;\r\n    this.$_addMarker();\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.map !== undefined && this.marker !== undefined) {\r\n      this.marker.remove();\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    $_addMarker() {\r\n      this.marker.setLngLat(this.coordinates).addTo(this.map);\r\n      this.$_bindMarkerDOMEvents();\r\n      this.$_emitEvent(\"added\", { marker: this.marker });\r\n    },\r\n\r\n    $_emitSelfEvent(event) {\r\n      this.$_emitMapEvent(event, { marker: this.marker });\r\n    },\r\n\r\n    $_bindMarkerDOMEvents() {\r\n      Object.keys(this.$listeners).forEach(key => {\r\n        if (Object.values(markerDOMEvents).includes(key)) {\r\n          this.marker._element.addEventListener(key, event => {\r\n            this.$_emitSelfEvent(event);\r\n          });\r\n        }\r\n      });\r\n    },\r\n\r\n    remove() {\r\n      this.marker.remove();\r\n      this.$_emitEvent(\"removed\");\r\n    },\r\n\r\n    togglePopup() {\r\n      return this.marker.togglePopup();\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"sourceRoot":"node_modules/vue-mapbox/src/components/UI"}]}