{"remainingRequest":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\src\\pages\\Maps.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\src\\pages\\Maps.vue","mtime":1715830879929},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\.babelrc","mtime":1715192465794},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\babel-loader\\lib\\index.js","mtime":1715192467870},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js","mtime":1715192477908}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport _toConsumableArray from \"C:/Users/PC/Desktop/Otros/DP1/Front/dp1_front-Redex/Redex/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"C:/Users/PC/Desktop/Otros/DP1/Front/dp1_front-Redex/Redex/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Mapbox from \"mapbox-gl\";\nimport { MglMap, MglNavigationControl, MglGeojsonLayer } from \"vue-mapbox\";\nimport Mapa from '@/store/map.json';\nimport Mapa2 from '@/store/map2.json';\nimport axios from 'axios';\nimport Authentication from '@/store/authentication.js';\nimport Simulation from '@/store/simulation.js';\nvar aeropuertos = [{\n  id: 0,\n  codigoOACI: \"SKBO\",\n  nombreCiudad: \"Bogotá\",\n  pais: \"Colombia\",\n  codigoIATA: \"bogo\",\n  husoHorario: -5,\n  capacidadAlmacenamientoMaximo: 430,\n  capacidadDeAlmacenamientoUsado: 400,\n  latitud: \"4.70139\",\n  longitud: \"-74.1469\",\n  coordinates: [\"-74.1469\", \"4.70139\"],\n  usoAlmacenamiento: {}\n}, {\n  id: 1,\n  codigoOACI: \"SEQM\",\n  nombreCiudad: \"Quito\",\n  pais: \"Ecuador\",\n  codigoIATA: \"quit\",\n  husoHorario: -5,\n  capacidadAlmacenamientoMaximo: 410,\n  capacidadDeAlmacenamientoUsado: 240,\n  latitud: \"0.113333\",\n  longitud: \"-78.3583\",\n  coordinates: [\"-78.3583\", \"0.113333\"],\n  usoAlmacenamiento: {}\n}, {\n  id: 2,\n  codigoOACI: \"SVMI\",\n  nombreCiudad: \"Caracas\",\n  pais: \"Venezuela\",\n  codigoIATA: \"cara\",\n  husoHorario: -4,\n  capacidadAlmacenamientoMaximo: 400,\n  capacidadDeAlmacenamientoUsado: 0,\n  latitud: \"10.6031\",\n  longitud: \"-66.9903\",\n  coordinates: [\"-66.9903\", \"10.6031\"],\n  usoAlmacenamiento: {}\n}, {\n  id: 3,\n  codigoOACI: \"SBBR\",\n  nombreCiudad: \"Brasilia\",\n  pais: \"Brasil\",\n  codigoIATA: \"bras\",\n  husoHorario: -3,\n  capacidadAlmacenamientoMaximo: 480,\n  capacidadDeAlmacenamientoUsado: 0,\n  latitud: \"-15.8645\",\n  longitud: \"-47.9178\",\n  coordinates: [\"-47.9178\", \"-15.8645\"],\n  usoAlmacenamiento: {}\n}];\nvar envios = [{\n  id: 0,\n  idEnvio: \"SBBR000000001\",\n  ciudadOrigen: \"SBBR\",\n  ciudadDestino: \"SEQM\",\n  fechaEnvio: \"2024-01-03\",\n  horaEnvio: \"00:01:00\",\n  cantidadPaquetes: 2,\n  // estadoEnvio: null,\n  ruta: {\n    id: 0,\n    vuelos: [{\n      id: 0,\n      ciudadOrigen: \"SBBR\",\n      ciudadDestino: \"SEQM\",\n      horaSalida: \"02:16:00\",\n      horaLlegada: \"14:08:00\",\n      capacidadCargaMaxima: 340,\n      capacidadCargaUsado: 300,\n      fechaSalida: \"2024-01-03\",\n      fechaLlegada: \"2024-01-03\",\n      tiempoEstimadoVuelo: \"PT6H52M\",\n      origen: [-47.9178, -15.8645],\n      // Bogotá\n      destino: [-78.3583, 0.113333] // Quito\n\n    }],\n    fitness: 33908.51018350059,\n    cantidadVuelos: 1\n  }\n}, {\n  id: 1,\n  idEnvio: \"SVMI000000001\",\n  ciudadOrigen: \"SVMI\",\n  ciudadDestino: \"SKBO\",\n  fechaEnvio: \"2024-01-03\",\n  horaEnvio: \"00:03:00\",\n  cantidadPaquetes: 2,\n  //  estadoEnvio: null,\n  ruta: {\n    id: 1,\n    vuelos: [{\n      id: 1,\n      ciudadOrigen: \"SVMI\",\n      ciudadDestino: \"SBBR\",\n      horaSalida: \"02:05:00\",\n      horaLlegada: \"07:28:00\",\n      capacidadCargaMaxima: 300,\n      capacidadCargaUsado: 2,\n      fechaSalida: \"2024-01-03\",\n      fechaLlegada: \"2024-01-03\",\n      tiempoEstimadoVuelo: \"PT6H23M\",\n      origen: [-66.9903, 10.6031],\n      // Bogotá\n      destino: [-47.9178, -15.8645] // Quito\n\n    }, {\n      id: 2,\n      ciudadOrigen: \"SBBR\",\n      ciudadDestino: \"SEQM\",\n      horaSalida: \"15:33:00\",\n      horaLlegada: \"17:14:00\",\n      capacidadCargaMaxima: 300,\n      capacidadCargaUsado: 320,\n      fechaSalida: \"2024-01-03\",\n      fechaLlegada: \"2024-01-03\",\n      tiempoEstimadoVuelo: \"PT2H41M\",\n      origen: [-47.9178, -15.8645],\n      // Bogotá\n      destino: [-78.3583, 0.113333] // Quito\n\n    }, {\n      id: 3,\n      ciudadOrigen: \"SEQM\",\n      ciudadDestino: \"SKBO\",\n      horaSalida: \"19:28:00\",\n      horaLlegada: \"06:08:00\",\n      capacidadCargaMaxima: 360,\n      capacidadCargaUsado: 2,\n      fechaSalida: \"2024-01-03\",\n      fechaLlegada: \"2024-01-04\",\n      tiempoEstimadoVuelo: \"PT15H40M\",\n      origen: [-78.3583, 0.113333],\n      // Bogotá\n      destino: [-74.1469, 4.70139] // Quito\n\n    }],\n    fitness: 32067.93361867229,\n    cantidadVuelos: 3\n  }\n}];\nexport default {\n  props: ['title', 'content', 'isVisible', 'isVisibleResumen'],\n  components: {\n    MglMap: MglMap,\n    MglNavigationControl: MglNavigationControl,\n    MglGeojsonLayer: MglGeojsonLayer\n  },\n  data: function data() {\n    var _this = this,\n        _ref;\n\n    return _ref = {\n      isModalVisible: false,\n      isVisibleResumen: false,\n      isVisible: false,\n      collapseReason: \"\",\n      isLegendOpen: false,\n      isAnimating: false,\n      envios: envios,\n      currentDateTime: new Date().toLocaleString('es-ES', {\n        timeZone: 'America/Lima',\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        timeZoneName: 'short'\n      }),\n      toggleIniciarDetener: true,\n      toggleReanudar: false,\n      accessToken: this.$store.state.map.token,\n      // your access token. Needed if you using Mapbox maps\n      mapStyle: 'mapbox://styles/mapbox/dark-v10',\n      center: [5, 15],\n      zoom: 2,\n      myInterval: null,\n      myIntervalReplan: null,\n      fecha_inicio_simulacion: null,\n      fecha_fin_simulacion: null,\n      type: [\"\", \"info\", \"success\", \"warning\", \"danger\"],\n      notifications: {\n        topCenter: false\n      },\n      geojsonAeropuertos: {\n        type: 'FeatureCollection',\n        features: aeropuertos.map(function (a) {\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: a.coordinates\n            },\n            properties: _objectSpread(_objectSpread({}, a), {}, {\n              'icon-image': _this.calculateIcon(a.capacidadDeAlmacenamientoUsado / a.capacidadAlmacenamientoMaximo)\n            })\n          };\n        })\n      },\n      createGeojsonSourceForEnvio: function createGeojsonSourceForEnvio(envio) {\n        var _this2 = this;\n\n        return {\n          type: 'FeatureCollection',\n          features: envio.ruta.vuelos.map(function (vuelo) {\n            return {\n              type: 'Feature',\n              properties: {\n                'icon-image': _this2.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: vuelo.origen\n              }\n            };\n          })\n        };\n      }\n    }, _defineProperty(_ref, \"envios\", [{\n      id: 0,\n      idEnvio: \"SBBR000000001\",\n      ciudadOrigen: \"SBBR\",\n      ciudadDestino: \"SEQM\",\n      fechaEnvio: \"2024-01-03\",\n      horaEnvio: \"00:01:00\",\n      cantidadPaquetes: 2,\n      estadoEnvio: null,\n      ruta: {\n        id: 0,\n        vuelos: [{\n          id: 0,\n          ciudadOrigen: \"SBBR\",\n          ciudadDestino: \"SEQM\",\n          horaSalida: \"02:16:00\",\n          horaLlegada: \"14:08:00\",\n          capacidadCargaMaxima: 340,\n          capacidadCargaUsado: 300,\n          fechaSalida: \"2024-01-03\",\n          fechaLlegada: \"2024-01-03\",\n          tiempoEstimadoVuelo: \"PT6H52M\",\n          origen: [-47.9178, -15.8645],\n          // Bogotá\n          destino: [-78.3583, 0.113333] // Quito\n\n        }],\n        fitness: 33908.51018350059,\n        cantidadVuelos: 1\n      }\n    }, {\n      id: 1,\n      idEnvio: \"SVMI000000001\",\n      ciudadOrigen: \"SVMI\",\n      ciudadDestino: \"SKBO\",\n      fechaEnvio: \"2024-01-03\",\n      horaEnvio: \"00:03:00\",\n      cantidadPaquetes: 2,\n      estadoEnvio: null,\n      ruta: {\n        id: 1,\n        vuelos: [{\n          id: 1,\n          ciudadOrigen: \"SVMI\",\n          ciudadDestino: \"SBBR\",\n          horaSalida: \"02:05:00\",\n          horaLlegada: \"07:28:00\",\n          capacidadCargaMaxima: 300,\n          capacidadCargaUsado: 2,\n          fechaSalida: \"2024-01-03\",\n          fechaLlegada: \"2024-01-03\",\n          tiempoEstimadoVuelo: \"PT6H23M\",\n          origen: [-66.9903, 10.6031],\n          // Bogotá\n          destino: [-47.9178, -15.8645] // Quito\n\n        }, {\n          id: 2,\n          ciudadOrigen: \"SBBR\",\n          ciudadDestino: \"SEQM\",\n          horaSalida: \"15:33:00\",\n          horaLlegada: \"17:14:00\",\n          capacidadCargaMaxima: 300,\n          capacidadCargaUsado: 320,\n          fechaSalida: \"2024-01-03\",\n          fechaLlegada: \"2024-01-03\",\n          tiempoEstimadoVuelo: \"PT2H41M\",\n          origen: [-47.9178, -15.8645],\n          // Bogotá\n          destino: [-78.3583, 0.113333] // Quito\n\n        }, {\n          id: 3,\n          ciudadOrigen: \"SEQM\",\n          ciudadDestino: \"SKBO\",\n          horaSalida: \"19:28:00\",\n          horaLlegada: \"06:08:00\",\n          capacidadCargaMaxima: 360,\n          capacidadCargaUsado: 2,\n          fechaSalida: \"2024-01-03\",\n          fechaLlegada: \"2024-01-04\",\n          tiempoEstimadoVuelo: \"PT15H40M\",\n          origen: [-78.3583, 0.113333],\n          // Bogotá\n          destino: [-74.1469, 4.70139] // Quito\n\n        }],\n        fitness: 32067.93361867229,\n        cantidadVuelos: 3\n      }\n    }]), _defineProperty(_ref, \"currentFlightIndex\", 0), _defineProperty(_ref, \"isSimulating\", false), _ref;\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    console.log(\"Aeropuertos disponibles:\", aeropuertos);\n    var vue = this;\n    this.updateTime();\n    this.map.on('load', function () {\n      _this3.loadImages(function () {\n        _this3.setupAirportLayer();\n\n        setInterval(function () {\n          _this3.updateAirportCapacities();\n\n          _this3.updateFlightCapacities();\n\n          _this3.checkForCollapse();\n        }, 1000); // Actualiza cada segundo\n      });\n    });\n  },\n  destroyed: function destroyed() {\n    clearInterval(this.setInterval);\n  },\n  methods: {\n    toggleLegend: function toggleLegend() {\n      this.isLegendOpen = !this.isLegendOpen;\n    },\n    calculateIcon: function calculateIcon(capacityRatio) {\n      if (capacityRatio < 0.50) return 'airport-green';else if (capacityRatio < 0.80) return 'airport-orange';\n      return 'airport-red';\n    },\n    calculateFlightIcon: function calculateFlightIcon(capacidadCargaUsado, capacidadCargaMaxima) {\n      var ratio = capacidadCargaUsado / capacidadCargaMaxima;\n      if (ratio < 0.50) return 'flight-green'; // Ensure these icons exist in your Mapbox style\n      else if (ratio < 0.80) return 'flight-orange';else return 'flight-red';\n    },\n    updateAirportCapacities: function updateAirportCapacities() {\n      var _this4 = this;\n\n      this.geojsonAeropuertos.features = this.aeropuertos.map(function (a) {\n        var usageRatio = a.capacidadDeAlmacenamientoUsado / a.capacidadAlmacenamientoMaximo;\n        return {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: a.coordinates\n          },\n          properties: _objectSpread(_objectSpread({}, a), {}, {\n            'icon-image': _this4.calculateIcon(usageRatio) // Asegúrate de que la propiedad se llama 'icon-image'\n\n          })\n        };\n      });\n\n      if (this.map && this.map.getSource('aeropuertos')) {\n        this.map.getSource('aeropuertos').setData(this.geojsonAeropuertos);\n      }\n    },\n    updateFlightCapacities: function updateFlightCapacities() {\n      var _this5 = this;\n\n      this.envios.forEach(function (envio) {\n        envio.ruta.vuelos.forEach(function (vuelo) {\n          // Aquí podrías actualizar la capacidad usada basado en alguna lógica o simulación\n          vuelo.capacidadCargaUsado = Math.max(0, Math.min(vuelo.capacidadCargaMaxima, vuelo.capacidadCargaUsado + (Math.random() * 20 - 10)));\n\n          _this5.updateFlightOnMap(vuelo, envio.id);\n        });\n      });\n    },\n    updateFlightOnMap: function updateFlightOnMap(vuelo, envioId) {\n      if (vuelo.capacidadCargaUsado > vuelo.capacidadCargaMaxima) {\n        console.log(\"Collapse detected!\");\n        this.showModal();\n      }\n\n      var sourceId = \"envio-\".concat(envioId);\n\n      if (this.map && this.map.getSource(sourceId)) {\n        this.map.getSource(sourceId).setData({\n          type: 'Feature',\n          properties: {\n            'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: vuelo.origen\n          }\n        });\n      }\n    },\n    updateTime: function updateTime() {\n      var _this6 = this;\n\n      setInterval(function () {\n        _this6.currentDateTime = new Date().toLocaleString('es-ES', {\n          timeZone: 'America/Lima',\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          timeZoneName: 'short'\n        });\n      }, 1000);\n    },\n    loadImages: function loadImages(callback) {\n      var _this7 = this;\n\n      var imagesToLoad = ['airport-green', 'airport-orange', 'airport-red', 'flight-green', 'flight-orange', 'flight-red'];\n      var loadedImages = 0;\n      var totalImages = imagesToLoad.length;\n\n      var imageLoaded = function imageLoaded() {\n        loadedImages++;\n\n        if (loadedImages === imagesToLoad.length) {\n          callback();\n        }\n      };\n\n      imagesToLoad.forEach(function (icon) {\n        _this7.map.loadImage(\"/img/\".concat(icon, \".png\"), function (error, image) {\n          if (error) {\n            console.error(\"Error loading image: /img/\".concat(icon, \".png\"), error);\n            return;\n          }\n\n          _this7.map.addImage(icon, image);\n\n          loadedImages++;\n          imageLoaded();\n        });\n      });\n    },\n    onMapLoaded: function onMapLoaded(event) {\n      var _this8 = this;\n\n      // Establecer referencia al mapa en componente y store global si es necesario\n      this.map = event.map;\n      this.$store.map = event.map; // Cargar todas las imágenes necesarias antes de configurar las capas\n\n      this.loadImages(function () {\n        // Una vez que las imágenes estén cargadas, configurar las capas\n        _this8.setupAirportLayer(); // Configurar la capa de aeropuertos primero\n        // this.setupFlightLayers(); // Configurar las capas de vuelos después\n        // Animar vuelos solo después de que todo está correctamente configurado\n\n\n        _this8.animateFlights(); // Luego inicia la animación\n\n      });\n    },\n    setupAirportLayer: function setupAirportLayer() {\n      if (!this.map.getSource('aeropuertos')) {\n        this.map.addSource('aeropuertos', {\n          type: 'geojson',\n          data: this.geojsonAeropuertos\n        });\n      }\n\n      if (!this.map.getLayer('aeropuertosLayer')) {\n        this.map.addLayer({\n          id: 'aeropuertosLayer',\n          type: 'symbol',\n          source: 'aeropuertos',\n          layout: {\n            'icon-image': ['get', 'icon-image'],\n            'icon-size': 1.0,\n            'icon-allow-overlap': true\n          }\n        });\n      }\n    },\n    iniciarSimulacion: function iniciarSimulacion() {\n      var vue = this;\n      vue.toggleIniciarDetener = false;\n      vue.toggleReanudar = false;\n      this.isAnimating = true;\n\n      if (!this.isSimulating) {\n        this.isSimulating = true; //  this.setupFlightLayers();  // Configura las capas primero\n\n        this.animateFlights(); // Luego inicia la animación\n      }\n\n      ;\n      /*this.envios.forEach(envio => {\r\n           envio.ruta.vuelos.forEach(vuelo => {\r\n             vuelo.capacidadCargaUsado += envio.cantidadPaquetes;  // Incrementar capacidad usada al iniciar el vuelo\r\n             this.updateAirportCapacitiesColapse(vuelo.ciudadOrigen, -envio.cantidadPaquetes); // Disminuir capacidad usada al iniciar el vuelo\r\n           });\r\n           //this.animateEnvio(envio);\r\n         });*/\n    },\n    animateFlights: function animateFlights() {\n      var _this9 = this;\n\n      envios.forEach(function (envio) {\n        _this9.animateEnvio(envio);\n      });\n    },\n    animateEnvio: function animateEnvio(envio) {\n      var _this10 = this;\n\n      var currentFlight = 0;\n\n      var moveNextFlight = function moveNextFlight() {\n        if (currentFlight < envio.ruta.vuelos.length) {\n          _this10.animateFlight(envio.ruta.vuelos[currentFlight], envio.cantidadPaquetes, envio.id, function () {\n            currentFlight++;\n            moveNextFlight();\n          });\n        }\n      };\n\n      moveNextFlight();\n    },\n    animateFlight: function animateFlight(vuelo, cantidadPaquetes, envioId, callback) {\n      var _this11 = this;\n\n      if (vuelo.capacidadCargaUsado > vuelo.capacidadCargaMaxima) {\n        this.collapseReason = 'EXCESO DE PAQUETES EN VUELOS';\n        console.log(\"Collapse detected!\"); //this.showCollapseAlert(\"collapseReason\", \"llapseDetails\");\n\n        this.handleCollapse(); // return;\n      } // console.log(`Updating capacities for ${vuelo.ciudadDestino} with ${cantidadPaquetes} packages`);\n\n\n      this.updateAirportCapacitiesColapse(vuelo.ciudadDestino, cantidadPaquetes);\n      var sourceId = \"envio-\".concat(envioId);\n\n      if (!this.map.getSource(sourceId)) {\n        this.map.addSource(sourceId, {\n          type: 'geojson',\n          data: {\n            type: 'Feature',\n            properties: {\n              'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: vuelo.origen\n            }\n          }\n        });\n        this.map.addLayer({\n          id: \"avion-\".concat(envioId),\n          type: 'symbol',\n          source: sourceId,\n          layout: {\n            'icon-image': ['get', 'icon-image'],\n            'icon-size': 0.7,\n            'icon-allow-overlap': true\n          }\n        });\n      }\n\n      var steps = 500;\n      var currentStep = 0;\n\n      var currentPos = _toConsumableArray(vuelo.origen);\n\n      var incrementLat = (vuelo.destino[1] - vuelo.origen[1]) / steps;\n      var incrementLng = (vuelo.destino[0] - vuelo.origen[0]) / steps;\n\n      var move = function move() {\n        if (currentStep <= steps) {\n          currentPos[0] += incrementLng;\n          currentPos[1] += incrementLat;\n\n          _this11.map.getSource(sourceId).setData({\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: currentPos\n            },\n            properties: {\n              'icon-image': _this11.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima) // Update the icon based on potentially updated capacities\n\n            }\n          });\n\n          currentStep++;\n          requestAnimationFrame(move);\n        } else {\n          callback();\n        }\n      };\n\n      move();\n    },\n    updateAirportCapacitiesColapse: function updateAirportCapacitiesColapse(codigoOACI, paquetes) {\n      //   console.log(`Updating capacities for ${codigoOACI} with ${paquetes} packages`);\n      this.collapseReason = 'EXCESO DE PAQUETES EN AEROPUERTOS';\n      var aeropuerto = aeropuertos.find(function (a) {\n        return a.codigoOACI === codigoOACI;\n      });\n\n      if (aeropuerto) {\n        aeropuerto.capacidadDeAlmacenamientoUsado += paquetes;\n        console.log(\"New storage used: \".concat(aeropuerto.capacidadDeAlmacenamientoUsado, \"/\").concat(aeropuerto.capacidadAlmacenamientoMaximo));\n\n        if (aeropuerto.capacidadDeAlmacenamientoUsado > aeropuerto.capacidadAlmacenamientoMaximo) {\n          console.log(\"Airport collapse detected!\");\n          var collapseReason = 'Exceso de paquetes';\n          var collapseDetails = {\n            location: 'Lima, Perú - SMTP',\n            packagesInvolved: '956'\n          };\n          this.showModal();\n        }\n      }\n    },\n    checkForCollapse: function checkForCollapse() {\n      console.log(\"Checking for collapse...\");\n\n      if (aeropuertos.some(function (aero) {\n        return aero.capacidadDeAlmacenamientoUsado > aero.capacidadAlmacenamientoMaximo;\n      }) || envios.some(function (envio) {\n        return envio.ruta.vuelos.some(function (vuelo) {\n          return vuelo.capacidadCargaUsado > vuelo.capacidadCargaMaxima;\n        });\n      })) {\n        console.log(\"Collapse detected!\");\n        this.showModal();\n      }\n    },\n    showModal: function showModal() {\n      this.isModalVisible = true;\n      this.isVisible = true;\n      this.isVisibleResumen = true;\n    },\n    handleCollapse: function handleCollapse() {\n      console.log(\"Collapse detected!\");\n      this.isSimulating = false; // Detener la simulación\n\n      this.showModal();\n    },\n    closeCollapseModal: function closeCollapseModal() {\n      this.isVisible = false;\n    },\n    detenerSimulacion: function detenerSimulacion() {\n      var vue = this;\n      vue.toggleIniciarDetener = false;\n      vue.toggleReanudar = true;\n    },\n    reanudarSimulacion: function reanudarSimulacion() {\n      var vue = this;\n      vue.toggleIniciarDetener = false;\n      vue.toggleReanudar = false;\n    },\n    cancelarSimulacion: function cancelarSimulacion() {\n      var vue = this;\n      vue.toggleIniciarDetener = true;\n      console.log(\"SE DETIENE LA SIMULACION\");\n      clearInterval(vue.myInterval);\n      Simulation.stopSimulation();\n      console.log(vue.fecha_fin_simulacion);\n    }\n  }\n};",{"version":3,"sources":["Maps.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  \r\n  <div class=\"map-container\">\r\n   \r\n   <div class=\"datetime-display\">\r\n     {{ currentDateTime }}\r\n   </div>\r\n   <div class=\"map-search-container\">\r\n     \r\n     <input class=\"search-input\" type=\"text\" placeholder=\"Buscar envío\">\r\n     <input class=\"search-input\" type=\"text\" placeholder=\"Buscar aeropuerto\">\r\n     <input class=\"search-input\" type=\"text\" placeholder=\"Buscar vuelo\">\r\n   </div>\r\n   <div id=\"legend\" class=\"map-legend\">\r\n <button class=\"legend-toggle\" @click=\"toggleLegend\">\r\n   {{ isLegendOpen ? '▲ Cerrar Leyenda' : '▼ Abrir Leyenda' }}\r\n </button>\r\n <ul :style=\"{ display: isLegendOpen ? 'block' : 'none' }\" class=\"legend-content\">\r\n  \r\n   <li><span class=\"dot greater-80\"></span>Menor a 50%</li>\r\n   <li><span class=\"dot between-50-80\"></span>Entre 50% y 80%</li>\r\n   <li><span class=\"dot less-50\"></span>Mayor a 80%</li>\r\n   <li><span class=\"icon airplane-icon\"></span>Vuelo</li>\r\n   <li><span class=\"icon airport-icon\"></span>Aeropuerto</li>\r\n </ul>\r\n</div>\r\n\r\n   \r\n<MglMap\r\n   class=\"main-map\"\r\n   :accessToken=\"accessToken\"\r\n   :mapStyle=\"mapStyle\"\r\n   :center=\"center\"\r\n   :zoom=\"zoom\"\r\n   style=\"height:750px!important;\"\r\n   @load=\"onMapLoaded\"\r\n >\r\n />\r\n <MglGeojsonLayer\r\n :sourceId=\"'aeropuertos'\"\r\n :layerId=\"'aeropuertosLayer'\"\r\n :type=\"'symbol'\"\r\n :source=\"geojsonAeropuertos\"\r\n :layout=\"{\r\n   'icon-image': ['get', 'icon-image'],\r\n   'icon-size': 1.0,\r\n   'icon-allow-overlap': true\r\n }\"\r\n/>\r\n\r\n\r\n\r\n\r\n<MglGeojsonLayer\r\n        v-for=\"(envio, index) in envios\"\r\n        :key=\"`envio-layer-${index}`\"\r\n        :sourceId=\"`envio-${index}`\"\r\n        :layerId=\"`avionLayer-${envio.id}`\"\r\n        :type=\"'symbol'\"\r\n        :source=\"createGeojsonSourceForEnvio(envio)\"\r\n        :layout=\"{\r\n          'icon-image': ['get', 'icon-image'],\r\n          'icon-size': 1.0,\r\n          'icon-allow-overlap': true\r\n        }\"\r\n      />\r\n \r\n\r\n </MglMap>\r\n\r\n\r\n   <!-- <div id=\"map\" style=\"height:750px!important;\"></div> -->\r\n\r\n\r\n  <div v-if=\"isVisibleResumen\" >\r\n    <button class=\"modal-button\" @click=\"showModal\">Mostrar resumen de colapso</button>\r\n\r\n  </div>\r\n  <div v-if=\"isVisible\" class=\"modal-overlay\" @click=\"closeCollapseModal\">\r\n    <div class=\"modal-content\" @click.stop>\r\n      <div class=\"collapse-icon\"></div> <!-- Icono de colapso -->\r\n      <h2>COLAPSO LOGÍSTICO</h2>\r\n      <p>El sistema ha colapsado debido a un <strong>{{ collapseReason }}</strong>.</p>\r\n      <p><strong>Detalles del Colapso:</strong></p>\r\n      <ul>\r\n        <li><strong>Motivo:</strong> EXCESO DE PAQUETES EN AEROPUERTOS</li>\r\n        <li><strong>Lugar:</strong> Lima, Perú - SMTP</li>\r\n        <li><strong>Fecha:</strong> {{ currentDateTime }}</li>\r\n        <li><strong>Almacenes o Vuelos afectados:</strong> Brasil, Brasilia; New York, USA; Cali, Colombia</li>\r\n      </ul>\r\n      <button class=\"modal-button\" @click=\"closeCollapseModal\">Intentar de nuevo</button>\r\n    </div>\r\n  </div>\r\n\r\n\r\n   <div class=\"row\">\r\n     <div class=\"col-md-3\" style=\"margin-top:40px!important\" v-show=\"toggleIniciarDetener\"> \r\n       <b-button  v-b-modal.modal-iniciar slot=\"footer\" type=\"primary\" fill>Iniciar</b-button>\r\n       <b-modal id=\"modal-iniciar\"\r\n           @ok=\"iniciarSimulacion\">\r\n           ¿Deseas iniciar la simulación?\r\n       </b-modal>\r\n     </div>\r\n     <div class=\"col-md-3\" style=\"margin-top:40px!important\" v-show=\"!toggleIniciarDetener\"> \r\n       <b-button  v-b-modal.modal-cancelar slot=\"footer\" type=\"primary\" fill>Cancelar</b-button>\r\n       <b-modal id=\"modal-cancelar\"\r\n           @ok=\"cancelarSimulacion\">\r\n           ¿Deseas cancelar la simulación?\r\n       </b-modal>\r\n     </div>\r\n     <div class=\"col-md-3\" style=\"margin-top:40px!important\" v-show=\"!toggleIniciarDetener && !toggleReanudar\"> \r\n       <b-button  v-b-modal.modal-detener slot=\"footer\" type=\"primary\" fill>Detener</b-button>\r\n       <b-modal id=\"modal-detener\"\r\n           @ok=\"detenerSimulacion\">\r\n           ¿Deseas detener la simulacion?\r\n       </b-modal>\r\n     </div>\r\n     <div class=\"col-md-3\" style=\"margin-top:40px!important\" v-show=\"!toggleIniciarDetener && toggleReanudar\"> \r\n       <b-button  v-b-modal.modal-reanudar slot=\"footer\" type=\"primary\" fill>Reanudar</b-button>\r\n       <b-modal id=\"modal-reanudar\"\r\n           @ok=\"reanudarSimulacion\">\r\n           ¿Deseas reanudar la simulación?\r\n       </b-modal>\r\n     </div>\r\n   \r\n   </div>\r\n   \r\n </div>\r\n</template>\r\n\r\n<script>\r\nimport Mapbox from \"mapbox-gl\";\r\nimport {MglMap, MglNavigationControl, MglGeojsonLayer} from \"vue-mapbox\";\r\nimport Mapa from '@/store/map.json';\r\nimport Mapa2 from '@/store/map2.json';\r\nimport axios from 'axios';\r\nimport Authentication from '@/store/authentication.js';\r\nimport Simulation from '@/store/simulation.js';\r\n\r\n\r\nconst \r\naeropuertos = [\r\n{\r\n        id: 0,\r\n        codigoOACI: \"SKBO\",\r\n        nombreCiudad: \"Bogotá\",\r\n        pais: \"Colombia\",\r\n        codigoIATA: \"bogo\",\r\n        husoHorario: -5,\r\n        capacidadAlmacenamientoMaximo: 430,\r\n        capacidadDeAlmacenamientoUsado: 400,\r\n        latitud: \"4.70139\",\r\n        longitud: \"-74.1469\",\r\n        coordinates: [\"-74.1469\", \"4.70139\"],\r\n        usoAlmacenamiento: {}\r\n      },\r\n      {\r\n        id: 1,\r\n        codigoOACI: \"SEQM\",\r\n        nombreCiudad: \"Quito\",\r\n        pais: \"Ecuador\",\r\n        codigoIATA: \"quit\",\r\n        husoHorario: -5,\r\n        capacidadAlmacenamientoMaximo: 410,\r\n        capacidadDeAlmacenamientoUsado: 240,\r\n        latitud: \"0.113333\",\r\n        longitud: \"-78.3583\",\r\n        coordinates: [\"-78.3583\", \"0.113333\"],\r\n        usoAlmacenamiento: {}\r\n      },\r\n      {\r\n        id: 2,\r\n        codigoOACI: \"SVMI\",\r\n        nombreCiudad: \"Caracas\",\r\n        pais: \"Venezuela\",\r\n        codigoIATA: \"cara\",\r\n        husoHorario: -4,\r\n        capacidadAlmacenamientoMaximo: 400,\r\n        capacidadDeAlmacenamientoUsado: 0,\r\n        latitud: \"10.6031\",\r\n        longitud: \"-66.9903\",\r\n        coordinates: [\"-66.9903\", \"10.6031\"],\r\n        usoAlmacenamiento: {}\r\n      },\r\n      {\r\n        id: 3,\r\n        codigoOACI: \"SBBR\",\r\n        nombreCiudad: \"Brasilia\",\r\n        pais: \"Brasil\",\r\n        codigoIATA: \"bras\",\r\n        husoHorario: -3,\r\n        capacidadAlmacenamientoMaximo: 480,\r\n        capacidadDeAlmacenamientoUsado: 0,\r\n        latitud: \"-15.8645\",\r\n        longitud: \"-47.9178\",\r\n        coordinates: [\"-47.9178\", \"-15.8645\"],\r\n        usoAlmacenamiento: {}\r\n      }\r\n    ];\r\n\r\n\r\n\r\n\r\n\r\nconst       envios = [\r\n      {\r\n        id: 0,\r\n        idEnvio: \"SBBR000000001\",\r\n        ciudadOrigen: \"SBBR\",\r\n        ciudadDestino: \"SEQM\",\r\n        fechaEnvio: \"2024-01-03\",\r\n        horaEnvio: \"00:01:00\",\r\n        cantidadPaquetes: 2,\r\n       // estadoEnvio: null,\r\n        ruta: {\r\n          id: 0,\r\n          vuelos: [\r\n            {\r\n              id: 0,\r\n              ciudadOrigen: \"SBBR\",\r\n              ciudadDestino: \"SEQM\",\r\n              horaSalida: \"02:16:00\",\r\n              horaLlegada: \"14:08:00\",\r\n              capacidadCargaMaxima: 340,\r\n              capacidadCargaUsado: 300,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-03\",\r\n              tiempoEstimadoVuelo: \"PT6H52M\",\r\n              origen: [-47.9178, -15.8645], // Bogotá\r\n              destino: [-78.3583, 0.113333], // Quito\r\n            }\r\n          ],\r\n          fitness: 33908.51018350059,\r\n          cantidadVuelos: 1\r\n        }\r\n      },\r\n      {\r\n        id: 1,\r\n        idEnvio: \"SVMI000000001\",\r\n        ciudadOrigen: \"SVMI\",\r\n        ciudadDestino: \"SKBO\",\r\n        fechaEnvio: \"2024-01-03\",\r\n        horaEnvio: \"00:03:00\",\r\n        cantidadPaquetes: 2,\r\n      //  estadoEnvio: null,\r\n        ruta: {\r\n          id: 1,\r\n          vuelos: [\r\n            {\r\n              id: 1,\r\n              ciudadOrigen: \"SVMI\",\r\n              ciudadDestino: \"SBBR\",\r\n              horaSalida: \"02:05:00\",\r\n              horaLlegada: \"07:28:00\",\r\n              capacidadCargaMaxima: 300,\r\n              capacidadCargaUsado: 2,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-03\",\r\n              tiempoEstimadoVuelo: \"PT6H23M\",\r\n              origen: [-66.9903, 10.6031], // Bogotá\r\n              destino:[-47.9178, -15.8645], // Quito\r\n            },\r\n            {\r\n              id: 2,\r\n              ciudadOrigen: \"SBBR\",\r\n              ciudadDestino: \"SEQM\",\r\n              horaSalida: \"15:33:00\",\r\n              horaLlegada: \"17:14:00\",\r\n              capacidadCargaMaxima: 300,\r\n              capacidadCargaUsado: 320,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-03\",\r\n              tiempoEstimadoVuelo: \"PT2H41M\",\r\n              origen:[-47.9178, -15.8645], // Bogotá\r\n              destino: [-78.3583, 0.113333],  // Quito\r\n            },\r\n            {\r\n              id: 3,\r\n              ciudadOrigen: \"SEQM\",\r\n              ciudadDestino: \"SKBO\",\r\n              horaSalida: \"19:28:00\",\r\n              horaLlegada: \"06:08:00\",\r\n              capacidadCargaMaxima: 360,\r\n              capacidadCargaUsado: 2,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-04\",\r\n              tiempoEstimadoVuelo: \"PT15H40M\",\r\n              origen: [-78.3583, 0.113333], // Bogotá\r\n              destino:  [-74.1469, 4.70139],  // Quito\r\n            }\r\n\r\n          ],\r\n          fitness: 32067.93361867229,\r\n          cantidadVuelos: 3\r\n        }\r\n      }\r\n    ];\r\n\r\n\r\n\r\n\r\nexport default {\r\n  props: ['title', 'content', 'isVisible','isVisibleResumen'],\r\n components: {\r\n   MglMap,\r\n   MglNavigationControl,\r\n   MglGeojsonLayer\r\n },\r\n data() {\r\n   return {\r\n    isModalVisible: false,\r\n    isVisibleResumen: false,\r\n    isVisible: false,\r\n    collapseReason: \"\",\r\n     isLegendOpen: false,\r\n     isAnimating: false,\r\n     envios: envios,\r\n     currentDateTime: new Date().toLocaleString('es-ES', { \r\n       timeZone: 'America/Lima', \r\n       year: 'numeric',\r\n       month: '2-digit',\r\n       day: '2-digit',\r\n       hour: '2-digit', \r\n       minute: '2-digit', \r\n       timeZoneName: 'short' \r\n     }),\r\n     toggleIniciarDetener: true,\r\n     toggleReanudar: false,\r\n     accessToken: this.$store.state.map.token, // your access token. Needed if you using Mapbox maps\r\n     mapStyle: 'mapbox://styles/mapbox/dark-v10',\r\n     center: [5,15],\r\n     zoom: 2,\r\n    \r\n\r\n     myInterval: null,\r\n     myIntervalReplan:null,\r\n\r\n     fecha_inicio_simulacion: null,\r\n     fecha_fin_simulacion: null,\r\n\r\n     type: [\"\", \"info\", \"success\", \"warning\", \"danger\"],\r\n     notifications: {\r\n       topCenter: false\r\n     },\r\n\r\n     geojsonAeropuertos: {\r\n       type: 'FeatureCollection',\r\n       features: aeropuertos.map(a => ({\r\n         type: 'Feature',\r\n         geometry: {\r\n           type: 'Point',\r\n           coordinates: a.coordinates\r\n         },\r\n         properties: {\r\n            ...a,\r\n            'icon-image': this.calculateIcon(a.capacidadDeAlmacenamientoUsado / a.capacidadAlmacenamientoMaximo)\r\n          }\r\n       }))\r\n     },\r\n\r\n\r\n\r\n     createGeojsonSourceForEnvio(envio) {\r\n  return {\r\n    type: 'FeatureCollection',\r\n    features: envio.ruta.vuelos.map(vuelo => ({\r\n      type: 'Feature',\r\n      properties: {\r\n        'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\r\n      },\r\n      geometry: {\r\n        type: 'Point',\r\n        coordinates: vuelo.origen\r\n      }\r\n    }))\r\n  };\r\n},\r\n     \r\n      envios: [\r\n      {\r\n        id: 0,\r\n        idEnvio: \"SBBR000000001\",\r\n        ciudadOrigen: \"SBBR\",\r\n        ciudadDestino: \"SEQM\",\r\n        fechaEnvio: \"2024-01-03\",\r\n        horaEnvio: \"00:01:00\",\r\n        cantidadPaquetes: 2,\r\n        estadoEnvio: null,\r\n        ruta: {\r\n          id: 0,\r\n          vuelos: [\r\n            {\r\n              id: 0,\r\n              ciudadOrigen: \"SBBR\",\r\n              ciudadDestino: \"SEQM\",\r\n              horaSalida: \"02:16:00\",\r\n              horaLlegada: \"14:08:00\",\r\n              capacidadCargaMaxima: 340,\r\n              capacidadCargaUsado: 300,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-03\",\r\n              tiempoEstimadoVuelo: \"PT6H52M\",\r\n              origen: [-47.9178, -15.8645], // Bogotá\r\n              destino: [-78.3583, 0.113333], // Quito\r\n            }\r\n          ],\r\n          fitness: 33908.51018350059,\r\n          cantidadVuelos: 1\r\n        }\r\n      },\r\n      {\r\n        id: 1,\r\n        idEnvio: \"SVMI000000001\",\r\n        ciudadOrigen: \"SVMI\",\r\n        ciudadDestino: \"SKBO\",\r\n        fechaEnvio: \"2024-01-03\",\r\n        horaEnvio: \"00:03:00\",\r\n        cantidadPaquetes: 2,\r\n        estadoEnvio: null,\r\n        ruta: {\r\n          id: 1,\r\n          vuelos: [\r\n            {\r\n              id: 1,\r\n              ciudadOrigen: \"SVMI\",\r\n              ciudadDestino: \"SBBR\",\r\n              horaSalida: \"02:05:00\",\r\n              horaLlegada: \"07:28:00\",\r\n              capacidadCargaMaxima: 300,\r\n              capacidadCargaUsado: 2,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-03\",\r\n              tiempoEstimadoVuelo: \"PT6H23M\",\r\n              origen: [-66.9903, 10.6031], // Bogotá\r\n              destino:[-47.9178, -15.8645], // Quito\r\n            },\r\n            {\r\n              id: 2,\r\n              ciudadOrigen: \"SBBR\",\r\n              ciudadDestino: \"SEQM\",\r\n              horaSalida: \"15:33:00\",\r\n              horaLlegada: \"17:14:00\",\r\n              capacidadCargaMaxima: 300,\r\n              capacidadCargaUsado: 320,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-03\",\r\n              tiempoEstimadoVuelo: \"PT2H41M\",\r\n              origen:[-47.9178, -15.8645], // Bogotá\r\n              destino: [-78.3583, 0.113333],  // Quito\r\n            },\r\n            {\r\n              id: 3,\r\n              ciudadOrigen: \"SEQM\",\r\n              ciudadDestino: \"SKBO\",\r\n              horaSalida: \"19:28:00\",\r\n              horaLlegada: \"06:08:00\",\r\n              capacidadCargaMaxima: 360,\r\n              capacidadCargaUsado: 2,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-04\",\r\n              tiempoEstimadoVuelo: \"PT15H40M\",\r\n              origen: [-78.3583, 0.113333], // Bogotá\r\n              destino:  [-74.1469, 4.70139],  // Quito\r\n            }\r\n\r\n          ],\r\n          fitness: 32067.93361867229,\r\n          cantidadVuelos: 3\r\n        }\r\n      }\r\n    ],\r\n     currentFlightIndex: 0,\r\n     isSimulating: false,\r\n    \r\n    \r\n     \r\n   }\r\n },\r\n mounted(){\r\n  console.log(\"Aeropuertos disponibles:\", aeropuertos);\r\n   let vue = this;\r\n   this.updateTime();\r\n   this.map.on('load', () => {\r\n    this.loadImages(() => {\r\n      this.setupAirportLayer();\r\n      setInterval(() => {\r\n        this.updateAirportCapacities();\r\n        this.updateFlightCapacities();\r\n        this.checkForCollapse();\r\n      }, 1000);  // Actualiza cada segundo\r\n    });\r\n  });\r\n },\r\n destroyed(){\r\n  clearInterval(this.setInterval); \r\n },\r\n methods: {\r\n\r\n\r\n   toggleLegend() {\r\n     this.isLegendOpen = !this.isLegendOpen;\r\n   },\r\n\r\n\r\n   calculateIcon(capacityRatio) {\r\n    if (capacityRatio < 0.50) return 'airport-green';\r\n    else if (capacityRatio < 0.80) return 'airport-orange';\r\n    return 'airport-red';\r\n  },\r\n\r\n\r\n  \r\n  calculateFlightIcon(capacidadCargaUsado, capacidadCargaMaxima) {\r\n  const ratio = capacidadCargaUsado / capacidadCargaMaxima;\r\n  if (ratio < 0.50) return 'flight-green';  // Ensure these icons exist in your Mapbox style\r\n  else if (ratio < 0.80) return 'flight-orange';\r\n  else return 'flight-red';\r\n},\r\n\r\n\r\n\r\n  updateAirportCapacities() {\r\n  this.geojsonAeropuertos.features = this.aeropuertos.map(a => {\r\n    let usageRatio = a.capacidadDeAlmacenamientoUsado / a.capacidadAlmacenamientoMaximo;\r\n    return {\r\n      type: 'Feature',\r\n      geometry: {\r\n        type: 'Point',\r\n        coordinates: a.coordinates\r\n      },\r\n      properties: {\r\n        ...a,\r\n        'icon-image': this.calculateIcon(usageRatio) // Asegúrate de que la propiedad se llama 'icon-image'\r\n      }\r\n    };\r\n  });\r\n  if (this.map && this.map.getSource('aeropuertos')) {\r\n    this.map.getSource('aeropuertos').setData(this.geojsonAeropuertos);\r\n  }\r\n},\r\n\r\n\r\n\r\n\r\nupdateFlightCapacities() {\r\n  this.envios.forEach(envio => {\r\n    envio.ruta.vuelos.forEach(vuelo => {\r\n      // Aquí podrías actualizar la capacidad usada basado en alguna lógica o simulación\r\n      vuelo.capacidadCargaUsado = Math.max(0, Math.min(vuelo.capacidadCargaMaxima, vuelo.capacidadCargaUsado + (Math.random() * 20 - 10)));\r\n      this.updateFlightOnMap(vuelo, envio.id);\r\n    });\r\n  });\r\n},\r\n\r\n\r\n\r\nupdateFlightOnMap(vuelo, envioId) {\r\n  if ( vuelo.capacidadCargaUsado > vuelo.capacidadCargaMaxima) {\r\n    console.log(\"Collapse detected!\");\r\n    this.showModal();\r\n  }\r\n  const sourceId = `envio-${envioId}`;\r\n  if (this.map && this.map.getSource(sourceId)) {\r\n    this.map.getSource(sourceId).setData({\r\n      type: 'Feature',\r\n      properties: {\r\n        'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\r\n      },\r\n      geometry: {\r\n        type: 'Point',\r\n        coordinates: vuelo.origen\r\n      }\r\n    });\r\n  }\r\n},\r\n\r\n\r\n  \r\n   updateTime() {\r\n\r\n     setInterval(() => {\r\n       this.currentDateTime = new Date().toLocaleString('es-ES', { \r\n         timeZone: 'America/Lima', \r\n         year: 'numeric',\r\n         month: '2-digit',\r\n         day: '2-digit',\r\n         hour: '2-digit', \r\n         minute: '2-digit', \r\n         timeZoneName: 'short'\r\n       });\r\n     }, 1000); },\r\n\r\n\r\n\r\nloadImages(callback) {\r\n  let imagesToLoad = ['airport-green', 'airport-orange', 'airport-red', 'flight-green', 'flight-orange', 'flight-red'];\r\n  let loadedImages = 0;\r\n  const totalImages = imagesToLoad.length;\r\n  const imageLoaded = () => {\r\n   loadedImages++;\r\n   if (loadedImages === imagesToLoad.length ) {\r\n     callback();\r\n   }\r\n };\r\n  imagesToLoad.forEach(icon => {\r\n    this.map.loadImage(`/img/${icon}.png`, (error, image) => {\r\n      if (error) {\r\n        console.error(`Error loading image: /img/${icon}.png`, error);\r\n        return;\r\n      }\r\n      this.map.addImage(icon, image);\r\n      loadedImages++;\r\n      imageLoaded();\r\n    });\r\n  });\r\n},\r\n\r\n\r\nonMapLoaded(event) {\r\n  // Establecer referencia al mapa en componente y store global si es necesario\r\n  this.map = event.map;\r\n  this.$store.map = event.map;\r\n\r\n  // Cargar todas las imágenes necesarias antes de configurar las capas\r\n  this.loadImages(() => {\r\n    // Una vez que las imágenes estén cargadas, configurar las capas\r\n    this.setupAirportLayer(); // Configurar la capa de aeropuertos primero\r\n   // this.setupFlightLayers(); // Configurar las capas de vuelos después\r\n    \r\n    // Animar vuelos solo después de que todo está correctamente configurado\r\n    this.animateFlights();  // Luego inicia la animación\r\n  });\r\n},\r\n\r\n\r\nsetupAirportLayer() {\r\n  if (!this.map.getSource('aeropuertos')) {\r\n    this.map.addSource('aeropuertos', {\r\n      type: 'geojson',\r\n      data: this.geojsonAeropuertos\r\n    });\r\n  }\r\n\r\n  if (!this.map.getLayer('aeropuertosLayer')) {\r\n    this.map.addLayer({\r\n      id: 'aeropuertosLayer',\r\n      type: 'symbol',\r\n      source: 'aeropuertos',\r\n      layout: {\r\n        'icon-image': ['get', 'icon-image'],\r\n        'icon-size': 1.0,\r\n        'icon-allow-overlap': true\r\n      }\r\n    });\r\n  }\r\n},\r\n\r\n\r\niniciarSimulacion() {\r\n let vue = this;\r\n vue.toggleIniciarDetener = false;\r\n vue.toggleReanudar = false;\r\n this.isAnimating = true;\r\n if (!this.isSimulating) {\r\n   this.isSimulating = true;\r\n //  this.setupFlightLayers();  // Configura las capas primero\r\n   this.animateFlights();  // Luego inicia la animación\r\n };\r\n /*this.envios.forEach(envio => {\r\n      envio.ruta.vuelos.forEach(vuelo => {\r\n        vuelo.capacidadCargaUsado += envio.cantidadPaquetes;  // Incrementar capacidad usada al iniciar el vuelo\r\n        this.updateAirportCapacitiesColapse(vuelo.ciudadOrigen, -envio.cantidadPaquetes); // Disminuir capacidad usada al iniciar el vuelo\r\n      });\r\n      //this.animateEnvio(envio);\r\n    });*/\r\n},\r\n\r\n\r\nanimateFlights() {\r\n  envios.forEach(envio => {\r\n    \r\n        this.animateEnvio(envio);\r\n      });\r\n    },\r\n\r\n\r\n    animateEnvio(envio) {\r\n      let currentFlight = 0;\r\n      const moveNextFlight = () => {\r\n        if (currentFlight < envio.ruta.vuelos.length) {\r\n          this.animateFlight(envio.ruta.vuelos[currentFlight],envio.cantidadPaquetes ,envio.id, () => {\r\n            currentFlight++;\r\n            moveNextFlight();\r\n          });\r\n        }\r\n      };\r\n      moveNextFlight();\r\n    },\r\n\r\n\r\n    animateFlight(vuelo, cantidadPaquetes,envioId ,callback) {\r\n      if ( vuelo.capacidadCargaUsado > vuelo.capacidadCargaMaxima) {\r\n\r\n    this.collapseReason = 'EXCESO DE PAQUETES EN VUELOS';\r\n    console.log(\"Collapse detected!\");\r\n    //this.showCollapseAlert(\"collapseReason\", \"llapseDetails\");\r\n    this.handleCollapse();\r\n   // return;\r\n  }\r\n // console.log(`Updating capacities for ${vuelo.ciudadDestino} with ${cantidadPaquetes} packages`);\r\n\r\n  this.updateAirportCapacitiesColapse(vuelo.ciudadDestino, cantidadPaquetes);\r\n \r\n      const sourceId = `envio-${envioId}`;\r\n      if (!this.map.getSource(sourceId)) {\r\n        this.map.addSource(sourceId, {\r\n          type: 'geojson',\r\n          data: {\r\n            type: 'Feature',\r\n            properties: {\r\n          'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\r\n        },\r\n            geometry: {\r\n              type: 'Point',\r\n              coordinates: vuelo.origen\r\n            }\r\n          }\r\n        });\r\n        this.map.addLayer({\r\n          id: `avion-${envioId}`,\r\n          type: 'symbol',\r\n          source: sourceId,\r\n          layout: {\r\n            'icon-image': ['get', 'icon-image'],\r\n            'icon-size': 0.7,\r\n            'icon-allow-overlap': true\r\n          }\r\n        });\r\n      }\r\n\r\n      let steps = 500;\r\n      let currentStep = 0;\r\n      let currentPos = [...vuelo.origen];\r\n      const incrementLat = (vuelo.destino[1] - vuelo.origen[1]) / steps;\r\n      const incrementLng = (vuelo.destino[0] - vuelo.origen[0]) / steps;\r\n\r\n      const move = () => {\r\n        if (currentStep <= steps) {\r\n          currentPos[0] += incrementLng;\r\n          currentPos[1] += incrementLat;\r\n          this.map.getSource(sourceId).setData({\r\n            type: 'Feature',\r\n            geometry: {\r\n              type: 'Point',\r\n              coordinates: currentPos\r\n            },\r\n            properties: {\r\n          'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima) // Update the icon based on potentially updated capacities\r\n        }\r\n          });\r\n          currentStep++;\r\n          requestAnimationFrame(move);\r\n        } else {\r\n          \r\n          callback();\r\n        }\r\n      };\r\n      move();\r\n    },\r\n  \r\n    updateAirportCapacitiesColapse(codigoOACI, paquetes) {\r\n   //   console.log(`Updating capacities for ${codigoOACI} with ${paquetes} packages`);\r\n   this.collapseReason = 'EXCESO DE PAQUETES EN AEROPUERTOS';\r\n    const aeropuerto = aeropuertos.find(a => a.codigoOACI === codigoOACI);\r\n    if (aeropuerto) {\r\n        aeropuerto.capacidadDeAlmacenamientoUsado += paquetes;\r\n        console.log(`New storage used: ${aeropuerto.capacidadDeAlmacenamientoUsado}/${aeropuerto.capacidadAlmacenamientoMaximo}`);\r\n        if (aeropuerto.capacidadDeAlmacenamientoUsado > aeropuerto.capacidadAlmacenamientoMaximo) {\r\n            console.log(\"Airport collapse detected!\");\r\n            const collapseReason = 'Exceso de paquetes';\r\n        const collapseDetails = {\r\n      location: 'Lima, Perú - SMTP',\r\n      packagesInvolved: '956'\r\n    };\r\n    this.showModal();\r\n        }\r\n    }\r\n  },\r\n\r\n    checkForCollapse() {\r\n  console.log(\"Checking for collapse...\");\r\n  if ( aeropuertos.some(aero => aero.capacidadDeAlmacenamientoUsado > aero.capacidadAlmacenamientoMaximo) || \r\n   envios.some(envio => envio.ruta.vuelos.some(vuelo => vuelo.capacidadCargaUsado > vuelo.capacidadCargaMaxima))) {\r\n    console.log(\"Collapse detected!\");\r\n    this.showModal();\r\n  }\r\n},\r\n\r\n\r\n\r\n  showModal() {\r\n      this.isModalVisible = true;\r\n      this.isVisible = true;\r\n      this.isVisibleResumen = true;\r\n    },\r\n\r\n    handleCollapse() {\r\n    console.log(\"Collapse detected!\");\r\n    this.isSimulating = false; // Detener la simulación\r\n    this.showModal();\r\n    \r\n  },\r\n  closeCollapseModal() {\r\n    this.isVisible = false;\r\n  },\r\n\r\n   detenerSimulacion(){\r\n     let vue = this;\r\n     vue.toggleIniciarDetener = false;\r\n     vue.toggleReanudar = true;\r\n     \r\n   },\r\n   reanudarSimulacion(){\r\n     let vue = this;\r\n     vue.toggleIniciarDetener = false;\r\n     vue.toggleReanudar = false;\r\n   },\r\n   cancelarSimulacion(){\r\n     let vue = this;\r\n     vue.toggleIniciarDetener = true;\r\n     console.log(\"SE DETIENE LA SIMULACION\");\r\n     clearInterval(vue.myInterval);\r\n     Simulation.stopSimulation();\r\n     console.log(vue.fecha_fin_simulacion);\r\n   }\r\n \r\n\r\n\r\n }\r\n}\r\n</script>\r\n<style scoped>\r\n.datetime-display {\r\n position: absolute;\r\n top: 10px;\r\n right: 10px;\r\n color: white;\r\n background-color: rgba(0, 0, 0, 0.7);\r\n padding: 5px 10px;\r\n border-radius: 5px;\r\n z-index: 1001; /* Asegúrate de que esté visible sobre el mapa */\r\n}\r\n\r\n.map-container {\r\n position: relative;\r\n height: 100vh;\r\n width: 100%;\r\n \r\n}\r\n\r\n.map-header {\r\n position: absolute;\r\n top: 0;\r\n left: 0;\r\n z-index: 1000;\r\n width: 100%;\r\n background-color: rgba(0, 0, 0, 0.5);\r\n padding: 10px;\r\n color: #fff;\r\n text-align: center;\r\n}\r\n\r\n.map-title {\r\n font-size: 1.5em;\r\n}\r\n\r\n.map-tagline {\r\n font-size: 1em;\r\n}\r\n\r\n.map-search-container {\r\n .map-search-container {\r\n position: absolute;\r\n top: 60px;\r\n left: 10px; /* Ajusta según necesidad */\r\n z-index: 1000;\r\n width: 200px; /* Ancho fijo para todos los inputs */\r\n padding: 10px;\r\n background-color: rgba(0, 0, 0, 0.5);\r\n display: flex;\r\n flex-direction: column; /* Cambio aquí */\r\n align-items: flex-start; /* Alinear al inicio (izquierda) */\r\n}\r\n}\r\n\r\n.search-input {\r\n flex: 1;\r\n margin: 0 5px;\r\n padding: 10px;\r\n border: none;\r\n border-radius: 5px;\r\n}\r\n\r\n.main-map {\r\n height: 100%;\r\n width: 100%;\r\n}\r\n\r\n.map-sidebar {\r\n position: absolute;\r\n top: 0;\r\n right: 0;\r\n z-index: 1000;\r\n height: 100%;\r\n width: 300px;\r\n background-color: rgba(0, 0, 0, 0.5);\r\n color: #fff;\r\n padding: 10px;\r\n display: flex;\r\n flex-direction: column;\r\n}\r\n\r\n\r\n.brand-title {\r\n font-size: 1em; /* Ajusta el tamaño como desees */\r\n color: #fff; /* Color para 'Redex' */\r\n font-weight: bold;\r\n}\r\n\r\n.brand-title-point {\r\n font-size: 1em; /* Asegúrate de que sea del mismo tamaño que .brand-title para alineación adecuada */\r\n color: #00B074; /* Color para el punto */\r\n font-weight: bold;\r\n}\r\n\r\n.brand-tagline {\r\n font-size: 1em; /* Ajusta el tamaño del tagline */\r\n color: #B9BBBD; /* Color para 'Always on Time' */\r\n font-weight: bold;\r\n margin-bottom: 199px;\r\n display: flex;\r\n align-items: baseline; /* Alinea correctamente el texto y el punto */\r\n gap: 0.2em; /* Ajusta el espacio entre 'Redex' y el punto */\r\n}\r\n\r\n/* Si deseas que 'Redex.' esté en una sola línea, puedes usar display: flex en el contenedor */\r\n.brand {\r\n display: flex;\r\n align-items: baseline; /* Alinea correctamente el texto y el punto */\r\n gap: 0.2em; /* Ajusta el espacio entre 'Redex' y el punto */\r\n \r\n margin-bottom: -5px; /* Ajusta esto para aumentar el espacio entre el título y el subtítulo */\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n.map-legend {\r\n color: black; /* Cambia el color de texto a negro */\r\n position: absolute;\r\n bottom: 120px;\r\n right: 20px;\r\n z-index: 1000;\r\n background: #fff;\r\n padding: 10px;\r\n border-radius: 5px;\r\n box-shadow: 0 2px 4px rgba(0,0,0,0.3);\r\n cursor: pointer;\r\n}\r\n\r\n.legend-toggle {\r\n background: #333;\r\n color: #fff;\r\n padding: 5px 10px;\r\n border: none;\r\n border-radius: 3px;\r\n cursor: pointer;\r\n display: block;\r\n width: 100%;\r\n text-align: center;\r\n}\r\n\r\n.legend-content {\r\n color: black;\r\n list-style: none;\r\n padding: 0;\r\n margin: 0; /* Remove margin-top when visible */\r\n display: none; /* Hidden by default */\r\n}\r\n\r\n.legend-content li {\r\n color: black; \r\n margin-bottom: 5px;\r\n display: flex;\r\n align-items: center;\r\n}\r\n\r\n.dot {\r\n\r\n height: 10px;\r\n width: 10px;\r\n border-radius: 50%;\r\n display: inline-block;\r\n margin-right: 10px;\r\n}\r\n\r\n.less-50 { background: red; }\r\n.between-50-80 { background: orange; }\r\n.greater-80 { background: green; }\r\n\r\n.icon {\r\n width: 16px;\r\n height: 16px;\r\n display: inline-block;\r\n background-size: contain;\r\n background-repeat: no-repeat;\r\n margin-right: 10px;\r\n}\r\n\r\n.modal-content {\r\n  background: white; /* Fondo blanco para alto contraste */\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0 4px 6px rgba(0,0,0,0.1);\r\n  color: black; /* Color de texto general a negro */\r\n  width: auto;\r\n  max-width: 500px; /* Ajusta el ancho máximo según necesites */\r\n  text-align: left; /* Asegura que el texto esté alineado a la izquierda */\r\n}\r\n\r\n.modal-content h2 {\r\n  color: red; /* Color rojo para el título del colapso */\r\n  font-weight: bold;\r\n  margin: 0 auto; /* Centra la imagen */\r\n}\r\n\r\n.modal-content strong {\r\n  color: red; /* Color rojo para las palabras clave */\r\n  font-weight: bold;\r\n}\r\n\r\n.modal-content p, .modal-content ul {\r\n  color: black; /* Resto del texto en negro */\r\n}\r\n\r\n.modal-button {\r\n  background-color: red; /* Fondo rojo para el botón */\r\n  color: white; /* Texto blanco para el botón */\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  margin-top: 10px; /* Espaciado superior para separarlo del contenido */\r\n  font-weight: bold;\r\n}\r\n\r\n.modal-button:hover {\r\n  background-color: darkred; /* Un rojo más oscuro al pasar el mouse */\r\n}\r\n.modal-content li strong {\r\n  color: black; /* Cambia el color de los términos clave a negro */\r\n  font-weight: normal; /* Si deseas que no sean bold */\r\n}\r\n\r\n.modal-content li {\r\n  color: black; /* Todos los textos de los items en negro */\r\n}\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 10000; /* Alto z-index para asegurar que está sobre otros elementos */\r\n}\r\n\r\n.collapse-icon {\r\n  background-image: url('/img/carita.png');\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  width: 50px; /* Ajusta el tamaño según tus necesidades */\r\n  height: 50px; /* Ajusta el tamaño según tus necesidades */\r\n  display: block;\r\n  margin: 0 auto; /* Centra la imagen */\r\n}\r\n.airplane-icon { background-image: url('/img/avion.png'); }\r\n.airport-icon { background-image: url('/img/ubi.png'); }\r\n.airport-green { background-image: url('/img/airport-green.png'); }\r\n.airport-orange { background-image: url('/img/airport-orange.png'); }\r\n.airport-red { background-image: url('/img/airport-red.png'); }\r\n.flight-green { background-image: url('/img/flight-green.png'); }\r\n.flight-orange { background-image: url('/img/flight-orange.png'); }\r\n.flight-red { background-image: url('/img/flight-red.png'); }\r\n\r\n</style>"],"sourceRoot":"src/pages"}]}