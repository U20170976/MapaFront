{"remainingRequest":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\src\\pages\\Maps.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\src\\pages\\Maps.vue","mtime":1716422535573},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\.babelrc","mtime":1715192465794},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\babel-loader\\lib\\index.js","mtime":1715192467870},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js","mtime":1715192477908}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.regexp.match\";\nimport _toConsumableArray from \"C:/Users/PC/Desktop/Otros/DP1/Front/dp1_front-Redex/Redex/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Users/PC/Desktop/Otros/DP1/Front/dp1_front-Redex/Redex/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"C:/Users/PC/Desktop/Otros/DP1/Front/dp1_front-Redex/Redex/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Mapbox from \"mapbox-gl\";\nimport { MglMap, MglNavigationControl, MglGeojsonLayer } from \"vue-mapbox\";\nimport Mapa from '@/store/map.json';\nimport Mapa2 from '@/store/map2.json';\nimport axios from 'axios';\nimport Authentication from '@/store/authentication.js';\nimport Simulation from '@/store/simulation.js';\nvar aeropuertos = [\n  /*{\r\n          id: 0,\r\n          codigoOACI: \"SKBO\",\r\n          nombreCiudad: \"Bogotá\",\r\n          pais: \"Colombia\",\r\n          codigoIATA: \"bogo\",\r\n          husoHorario: -5,\r\n          capacidadAlmacenamientoMaximo: 430,\r\n          capacidadDeAlmacenamientoUsado: 400,\r\n          latitud: \"4.70139\",\r\n          longitud: \"-74.1469\",\r\n          coordinates: [\"-74.1469\", \"4.70139\"],\r\n          usoAlmacenamiento: {}\r\n        },\r\n        {\r\n          id: 1,\r\n          codigoOACI: \"SEQM\",\r\n          nombreCiudad: \"Quito\",\r\n          pais: \"Ecuador\",\r\n          codigoIATA: \"quit\",\r\n          husoHorario: -5,\r\n          capacidadAlmacenamientoMaximo: 410,\r\n          capacidadDeAlmacenamientoUsado: 240,\r\n          latitud: \"0.113333\",\r\n          longitud: \"-78.3583\",\r\n          coordinates: [\"-78.3583\", \"0.113333\"],\r\n          usoAlmacenamiento: {}\r\n        },\r\n        {\r\n          id: 2,\r\n          codigoOACI: \"SVMI\",\r\n          nombreCiudad: \"Caracas\",\r\n          pais: \"Venezuela\",\r\n          codigoIATA: \"cara\",\r\n          husoHorario: -4,\r\n          capacidadAlmacenamientoMaximo: 400,\r\n          capacidadDeAlmacenamientoUsado: 0,\r\n          latitud: \"10.6031\",\r\n          longitud: \"-66.9903\",\r\n          coordinates: [\"-66.9903\", \"10.6031\"],\r\n          usoAlmacenamiento: {}\r\n        },\r\n        {\r\n          id: 3,\r\n          codigoOACI: \"SBBR\",\r\n          nombreCiudad: \"Brasilia\",\r\n          pais: \"Brasil\",\r\n          codigoIATA: \"bras\",\r\n          husoHorario: -3,\r\n          capacidadAlmacenamientoMaximo: 480,\r\n          capacidadDeAlmacenamientoUsado: 0,\r\n          latitud: \"-15.8645\",\r\n          longitud: \"-47.9178\",\r\n          coordinates: [\"-47.9178\", \"-15.8645\"],\r\n          usoAlmacenamiento: {}\r\n        }*/\n];\nvar calendarioVuelos = {\n  \"2024-01-11\": [{\n    \"id\": 1,\n    \"ciudadOrigen\": \"RKSI\",\n    \"ciudadDestino\": \"LOWW\",\n    \"horaSalida\": \"00:01:00\",\n    \"horaLlegada\": \"20:36:00\",\n    \"capacidadCargaMaxima\": 340,\n    \"capacidadCargaUsado\": 0,\n    \"fechaSalida\": \"2024-01-02\",\n    \"fechaLlegada\": \"2024-01-02\",\n    \"tiempoEstimadoVuelo\": \"PT3H35M\",\n    \"fechaHoraSalidaGMT0\": \"2024-01-10T15:01:00\",\n    \"fechaHoraLlegadaGMT0\": \"2024-01-10T18:36:00\",\n    \"latitud\": \"37Â° 27' 48\\\" N\",\n    \"longitud\": \"126Â° 26' 24\\\" E\",\n    \"origen\": [126.44, 37.46333333333334],\n    \"destino\": [16.570833333333333, 48.11083333333333]\n  }, {\n    \"id\": 2,\n    \"ciudadOrigen\": \"RKSI\",\n    \"ciudadDestino\": \"VTBS\",\n    \"horaSalida\": \"00:09:00\",\n    \"horaLlegada\": \"03:31:00\",\n    \"capacidadCargaMaxima\": 340,\n    \"capacidadCargaUsado\": 0,\n    \"fechaSalida\": \"2024-01-02\",\n    \"fechaLlegada\": \"2024-01-02\",\n    \"tiempoEstimadoVuelo\": \"PT5H22M\",\n    \"fechaHoraSalidaGMT0\": \"2024-01-10T15:09:00\",\n    \"fechaHoraLlegadaGMT0\": \"2024-01-10T20:31:00\",\n    \"latitud\": \"37Â° 27' 48\\\" N\",\n    \"longitud\": \"126Â° 26' 24\\\" E\",\n    \"origen\": [126.44, 37.46333333333334],\n    \"destino\": [100.74722222222222, 13.680833333333332]\n  }, {\n    \"id\": 3,\n    \"ciudadOrigen\": \"RKSI\",\n    \"ciudadDestino\": \"UMMS\",\n    \"horaSalida\": \"00:20:00\",\n    \"horaLlegada\": \"22:03:00\",\n    \"capacidadCargaMaxima\": 300,\n    \"capacidadCargaUsado\": 0,\n    \"fechaSalida\": \"2024-01-02\",\n    \"fechaLlegada\": \"2024-01-02\",\n    \"tiempoEstimadoVuelo\": \"PT3H43M\",\n    \"fechaHoraSalidaGMT0\": \"2024-01-10T15:20:00\",\n    \"fechaHoraLlegadaGMT0\": \"2024-01-10T19:03:00\",\n    \"latitud\": \"37Â° 27' 48\\\" N\",\n    \"longitud\": \"126Â° 26' 24\\\" E\",\n    \"origen\": [126.44, 37.46333333333334],\n    \"destino\": [28.0325, 53.8825]\n  }]\n};\nvar envios = [{\n  id: 0,\n  idEnvio: \"SBBR000000001\",\n  ciudadOrigen: \"SBBR\",\n  ciudadDestino: \"SEQM\",\n  fechaEnvio: \"2024-03-03\",\n  horaEnvio: \"00:01:00\",\n  cantidadPaquetes: 2,\n  // estadoEnvio: null,\n  ruta: {\n    id: 0,\n    vuelos: [{\n      id: 0,\n      ciudadOrigen: \"SBBR\",\n      ciudadDestino: \"SEQM\",\n      horaSalida: \"02:16:00\",\n      horaLlegada: \"14:08:00\",\n      capacidadCargaMaxima: 340,\n      capacidadCargaUsado: 300,\n      fechaSalida: \"2024-03-03\",\n      fechaLlegada: \"2024-03-03\",\n      tiempoEstimadoVuelo: \"PT6H52M\",\n      origen: [-47.9178, -15.8645],\n      // Bogotá\n      destino: [-78.3583, 0.113333] // Quito\n\n    }],\n    fitness: 33908.51018350059,\n    cantidadVuelos: 1\n  }\n}, {\n  id: 1,\n  idEnvio: \"SVMI000000001\",\n  ciudadOrigen: \"SVMI\",\n  ciudadDestino: \"SKBO\",\n  fechaEnvio: \"2024-01-03\",\n  horaEnvio: \"00:03:00\",\n  cantidadPaquetes: 2,\n  //  estadoEnvio: null,\n  ruta: {\n    id: 1,\n    vuelos: [{\n      id: 1,\n      ciudadOrigen: \"SVMI\",\n      ciudadDestino: \"SBBR\",\n      horaSalida: \"02:05:00\",\n      horaLlegada: \"07:28:00\",\n      capacidadCargaMaxima: 300,\n      capacidadCargaUsado: 2,\n      fechaSalida: \"2024-01-03\",\n      fechaLlegada: \"2024-01-03\",\n      tiempoEstimadoVuelo: \"PT6H23M\",\n      origen: [-66.9903, 10.6031],\n      // Bogotá\n      destino: [-47.9178, -15.8645] // Quito\n\n    }, {\n      id: 2,\n      ciudadOrigen: \"SBBR\",\n      ciudadDestino: \"SEQM\",\n      horaSalida: \"15:33:00\",\n      horaLlegada: \"17:14:00\",\n      capacidadCargaMaxima: 300,\n      capacidadCargaUsado: 280,\n      fechaSalida: \"2024-01-03\",\n      fechaLlegada: \"2024-01-03\",\n      tiempoEstimadoVuelo: \"PT2H41M\",\n      origen: [-47.9178, -15.8645],\n      // Bogotá\n      destino: [-78.3583, 0.113333] // Quito\n\n    }, {\n      id: 3,\n      ciudadOrigen: \"SEQM\",\n      ciudadDestino: \"SKBO\",\n      horaSalida: \"19:28:00\",\n      horaLlegada: \"06:08:00\",\n      capacidadCargaMaxima: 360,\n      capacidadCargaUsado: 390,\n      fechaSalida: \"2024-01-03\",\n      fechaLlegada: \"2024-01-04\",\n      tiempoEstimadoVuelo: \"PT15H40M\",\n      origen: [-78.3583, 0.113333],\n      // Bogotá\n      destino: [-74.1469, 4.70139] // Quito\n\n    }],\n    fitness: 32067.93361867229,\n    cantidadVuelos: 3\n  }\n}];\nexport default {\n  props: ['title', 'content', 'isVisible', 'isVisibleResumen'],\n  components: {\n    MglMap: MglMap,\n    MglNavigationControl: MglNavigationControl,\n    MglGeojsonLayer: MglGeojsonLayer\n  },\n  data: function data() {\n    var _this = this,\n        _ref;\n\n    return _ref = {\n      simulationDateTime: null,\n      simulationInterval: null,\n      realTimePerSimulatedSecond: 1000 / (60 * 6),\n      // 1 second real time = 6 minutes simulated time\n      openModals: [],\n      openFlightModals: [],\n      isModalVisible: false,\n      isVisibleResumen: false,\n      isVisible: false,\n      collapseReason: \"\",\n      isLegendOpen: false,\n      isAnimating: false,\n      envios: envios,\n      calendarioVuelos: {},\n      currentDateTime: new Date().toLocaleString('es-ES', {\n        timeZone: 'America/Lima',\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        timeZoneName: 'short'\n      }),\n      toggleIniciarDetener: true,\n      toggleReanudar: false,\n      accessToken: this.$store.state.map.token,\n      // your access token. Needed if you using Mapbox maps\n      mapStyle: 'mapbox://styles/mapbox/dark-v10',\n      center: [5, 15],\n      zoom: 2,\n      myInterval: null,\n      myIntervalReplan: null,\n      fecha_inicio_simulacion: '',\n      fecha_fin_simulacion: null,\n      type: [\"\", \"info\", \"success\", \"warning\", \"danger\"],\n      notifications: {\n        topCenter: false\n      },\n      geojsonAeropuertos: {\n        type: 'FeatureCollection',\n        features: aeropuertos.map(function (a) {\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: a.coordinates\n            },\n            properties: _objectSpread(_objectSpread({}, a), {}, {\n              'icon-image': _this.calculateIcon(a.capacidadDeAlmacenamientoUsado / a.capacidadAlmacenamientoMaximo)\n            })\n          };\n        })\n      },\n      createGeojsonSourceForEnvio: function createGeojsonSourceForEnvio(envio) {\n        var _this2 = this;\n\n        return {\n          type: 'FeatureCollection',\n          features: envio.ruta.vuelos.map(function (vuelo) {\n            return {\n              type: 'Feature',\n              properties: {\n                id: vuelo.id,\n                'icon-image': _this2.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: vuelo.origen\n              }\n            };\n          })\n        };\n      },\n      createGeojsonSourceForVuelo: function createGeojsonSourceForVuelo(vuelo) {\n        return {\n          type: 'FeatureCollection',\n          features: [{\n            type: 'Feature',\n            properties: {\n              id: vuelo.id,\n              'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: vuelo.origen\n            }\n          }]\n        };\n      }\n    }, _defineProperty(_ref, \"envios\", [{\n      id: 0,\n      idEnvio: \"SBBR000000001\",\n      ciudadOrigen: \"SBBR\",\n      ciudadDestino: \"SEQM\",\n      fechaEnvio: \"2024-03-03\",\n      horaEnvio: \"00:01:00\",\n      cantidadPaquetes: 2,\n      estadoEnvio: null,\n      ruta: {\n        id: 0,\n        vuelos: [{\n          id: 0,\n          ciudadOrigen: \"SBBR\",\n          ciudadDestino: \"SEQM\",\n          horaSalida: \"02:16:00\",\n          horaLlegada: \"14:08:00\",\n          capacidadCargaMaxima: 340,\n          capacidadCargaUsado: 300,\n          fechaSalida: \"2024-03-03\",\n          fechaLlegada: \"2024-03-03\",\n          tiempoEstimadoVuelo: \"PT6H52M\",\n          origen: [-47.9178, -15.8645],\n          // Bogotá\n          destino: [-78.3583, 0.113333] // Quito\n\n        }],\n        fitness: 33908.51018350059,\n        cantidadVuelos: 1\n      }\n    }, {\n      id: 1,\n      idEnvio: \"SVMI000000001\",\n      ciudadOrigen: \"SVMI\",\n      ciudadDestino: \"SKBO\",\n      fechaEnvio: \"2024-01-03\",\n      horaEnvio: \"00:03:00\",\n      cantidadPaquetes: 2,\n      estadoEnvio: null,\n      ruta: {\n        id: 1,\n        vuelos: [{\n          id: 1,\n          ciudadOrigen: \"SVMI\",\n          ciudadDestino: \"SBBR\",\n          horaSalida: \"02:05:00\",\n          horaLlegada: \"07:28:00\",\n          capacidadCargaMaxima: 300,\n          capacidadCargaUsado: 2,\n          fechaSalida: \"2024-01-03\",\n          fechaLlegada: \"2024-01-03\",\n          tiempoEstimadoVuelo: \"PT6H23M\",\n          origen: [-66.9903, 10.6031],\n          // Bogotá\n          destino: [-47.9178, -15.8645] // Quito\n\n        }, {\n          id: 2,\n          ciudadOrigen: \"SBBR\",\n          ciudadDestino: \"SEQM\",\n          horaSalida: \"15:33:00\",\n          horaLlegada: \"17:14:00\",\n          capacidadCargaMaxima: 300,\n          capacidadCargaUsado: 280,\n          fechaSalida: \"2024-01-03\",\n          fechaLlegada: \"2024-01-03\",\n          tiempoEstimadoVuelo: \"PT2H41M\",\n          origen: [-47.9178, -15.8645],\n          // Bogotá\n          destino: [-78.3583, 0.113333] // Quito\n\n        }, {\n          id: 3,\n          ciudadOrigen: \"SEQM\",\n          ciudadDestino: \"SKBO\",\n          horaSalida: \"19:28:00\",\n          horaLlegada: \"06:08:00\",\n          capacidadCargaMaxima: 360,\n          capacidadCargaUsado: 390,\n          fechaSalida: \"2024-01-03\",\n          fechaLlegada: \"2024-01-04\",\n          tiempoEstimadoVuelo: \"PT15H40M\",\n          origen: [-78.3583, 0.113333],\n          // Bogotá\n          destino: [-74.1469, 4.70139] // Quito\n\n        }],\n        fitness: 32067.93361867229,\n        cantidadVuelos: 3\n      }\n    }]), _defineProperty(_ref, \"currentFlightIndex\", 0), _defineProperty(_ref, \"isSimulating\", false), _ref;\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    console.log(\"Aeropuertos disponibles:\", aeropuertos);\n    console.log(\"Vuelos disponibles:\", calendarioVuelos);\n    this.fetchAeropuertos();\n    var vue = this;\n    this.updateTime();\n    this.map.on('load', function () {\n      _this3.loadImages(function () {\n        _this3.setupAirportLayer();\n\n        setInterval(function () {\n          _this3.updateAirportCapacities();\n\n          _this3.updateFlightCapacities();\n\n          _this3.checkForCollapse();\n        }, 1000); // Actualiza cada segundo\n      });\n    });\n  },\n  destroyed: function destroyed() {\n    clearInterval(this.setInterval);\n  },\n  methods: {\n    fetchAeropuertos: function fetchAeropuertos() {\n      var _this4 = this;\n\n      axios.get('http://localhost/api/aeropuertos').then(function (response) {\n        _this4.aeropuertos = response.data;\n        _this4.geojsonAeropuertos.features = _this4.aeropuertos.map(function (a) {\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: a.coordinates\n            },\n            properties: _objectSpread(_objectSpread({}, a), {}, {\n              'icon-image': _this4.calculateIcon(a.capacidadDeAlmacenamientoUsado / a.capacidadAlmacenamientoMaximo)\n            })\n          };\n        });\n\n        if (_this4.map && _this4.map.getSource('aeropuertos')) {\n          _this4.map.getSource('aeropuertos').setData(_this4.geojsonAeropuertos);\n        }\n      }).catch(function (error) {\n        console.error(\"Error fetching aeropuertos:\", error);\n      });\n    },\n    toggleLegend: function toggleLegend() {\n      this.isLegendOpen = !this.isLegendOpen;\n    },\n    calculateIcon: function calculateIcon(capacityRatio) {\n      if (capacityRatio < 0.50) return 'airport-green';else if (capacityRatio < 0.80) return 'airport-orange';\n      return 'airport-red';\n    },\n    calculateFlightIcon: function calculateFlightIcon(capacidadCargaUsado, capacidadCargaMaxima) {\n      var ratio = capacidadCargaUsado / capacidadCargaMaxima;\n      if (ratio < 0.50) return 'flight-green'; // Ensure these icons exist in your Mapbox style\n      else if (ratio < 0.80) return 'flight-orange';else return 'flight-red';\n    },\n    updateAirportCapacities: function updateAirportCapacities() {\n      var _this5 = this;\n\n      this.geojsonAeropuertos.features = this.aeropuertos.map(function (a) {\n        var usageRatio = a.capacidadDeAlmacenamientoUsado / a.capacidadAlmacenamientoMaximo;\n        return {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: a.coordinates\n          },\n          properties: _objectSpread(_objectSpread({}, a), {}, {\n            'icon-image': _this5.calculateIcon(usageRatio) // Asegúrate de que la propiedad se llama 'icon-image'\n\n          })\n        };\n      });\n\n      if (this.map && this.map.getSource('aeropuertos')) {\n        this.map.getSource('aeropuertos').setData(this.geojsonAeropuertos);\n      }\n    },\n    updateFlightCapacities: function updateFlightCapacities() {\n      var _this6 = this;\n\n      this.envios.forEach(function (envio) {\n        envio.ruta.vuelos.forEach(function (vuelo) {\n          // Aquí podrías actualizar la capacidad usada basado en alguna lógica o simulación\n          vuelo.capacidadCargaUsado = Math.max(0, Math.min(vuelo.capacidadCargaMaxima, vuelo.capacidadCargaUsado + (Math.random() * 20 - 10)));\n\n          _this6.updateFlightOnMap(vuelo, envio.id);\n        });\n      });\n    },\n    updateFlightOnMap: function updateFlightOnMap(vuelo, envioId) {\n      if (vuelo.capacidadCargaUsado > vuelo.capacidadCargaMaxima) {\n        console.log(\"Collapse detected!\");\n        this.showModal();\n      }\n\n      var sourceId = \"envio-\".concat(envioId);\n\n      if (this.map.getSource(sourceId)) {\n        this.map.getSource(sourceId).setData({\n          type: 'Feature',\n          properties: {\n            id: vuelo.id,\n            'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: vuelo.origen\n          }\n        });\n      } else {\n        console.error(\"Source \".concat(sourceId, \" not found!\"));\n      }\n    },\n    updateTime: function updateTime() {\n      var _this7 = this;\n\n      if (!this.fecha_inicio_simulacion) {\n        console.error(\"Fecha de inicio de simulación no está definida\");\n        return;\n      } //const startDateTime = new Date(this.fecha_inicio_simulacion + 'T00:00:00Z');\n\n\n      var startDateTime = new Date('2024-01-07T14:30:00Z');\n      this.simulationDateTime = startDateTime;\n      this.updateCurrentDateTimeDisplay();\n      this.simulationInterval = setInterval(function () {\n        _this7.simulationDateTime = new Date(_this7.simulationDateTime.getTime() + 360000); // Agregar// Agregar 6 minutos al tiempo de simulación cada segundo en tiempo real\n\n        _this7.updateCurrentDateTimeDisplay();\n\n        _this7.checkAndAnimateFlights();\n      }, 1000);\n    },\n    checkAndAnimateFlights: function checkAndAnimateFlights() {\n      var _this8 = this;\n\n      var currentTime = this.simulationDateTime.getTime();\n      console.log(\"Tiempo de simulaci\\xF3n actual: \".concat(new Date(currentTime).toISOString()));\n      this.pendingFlights.forEach(function (vuelo) {\n        var vueloStartTime = new Date(vuelo.fechaHoraSalidaGMT0).getTime();\n        var cincoHorasEnMilisegundos = 5 * 60 * 60 * 1000; // 5 horas convertidas a milisegundos\n\n        var nuevoVueloStartTime = new Date(vueloStartTime - cincoHorasEnMilisegundos);\n\n        if (currentTime >= nuevoVueloStartTime && !vuelo.animated) {\n          vuelo.animated = true; // Marcar el vuelo como animado\n\n          console.log(\"Animando vuelo con ID \".concat(vuelo.id, \" a las \").concat(new Date(vueloStartTime).toISOString()));\n\n          _this8.animateFlight(vuelo);\n        }\n      });\n      this.pendingFlights = this.pendingFlights.filter(function (vuelo) {\n        return !vuelo.animated;\n      }); // Remover los vuelos animados\n    },\n    updateCurrentDateTimeDisplay: function updateCurrentDateTimeDisplay() {\n      this.currentDateTime = this.simulationDateTime.toLocaleString('es-ES', {\n        timeZone: 'UTC',\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        timeZoneName: 'short'\n      });\n    },\n    loadImages: function loadImages(callback) {\n      var _this9 = this;\n\n      var imagesToLoad = ['airport-green', 'airport-orange', 'airport-red', 'flight-green', 'flight-orange', 'flight-red'];\n      var loadedImages = 0;\n      var totalImages = imagesToLoad.length;\n\n      var imageLoaded = function imageLoaded() {\n        loadedImages++;\n\n        if (loadedImages === imagesToLoad.length) {\n          callback();\n        }\n      };\n\n      imagesToLoad.forEach(function (icon) {\n        _this9.map.loadImage(\"/img/\".concat(icon, \".png\"), function (error, image) {\n          if (error) {\n            console.error(\"Error loading image: /img/\".concat(icon, \".png\"), error);\n            return;\n          }\n\n          _this9.map.addImage(icon, image);\n\n          loadedImages++;\n          imageLoaded();\n        });\n      });\n    },\n    onMapLoaded: function onMapLoaded(event) {\n      var _this10 = this;\n\n      // Establecer referencia al mapa en componente y store global si es necesario\n      this.map = event.map;\n      this.$store.map = event.map; // Cargar todas las imágenes necesarias antes de configurar las capas\n\n      this.loadImages(function () {\n        // Una vez que las imágenes estén cargadas, configurar las capas\n        _this10.setupAirportLayer(); // Configurar la capa de aeropuertos primero\n        // this.setupFlightLayers(); // Configurar las capas de vuelos después\n\n\n        _this10.map.on('click', 'aeropuertosLayer', _this10.onAirportClick); // Animar vuelos solo después de que todo está correctamente configurado\n\n\n        _this10.animateFlights(); // Luego inicia la animación\n\n      });\n    },\n    setupAirportLayer: function setupAirportLayer() {\n      if (!this.map.getSource('aeropuertos')) {\n        this.map.addSource('aeropuertos', {\n          type: 'geojson',\n          data: this.geojsonAeropuertos\n        });\n      }\n\n      if (!this.map.getLayer('aeropuertosLayer')) {\n        this.map.addLayer({\n          id: 'aeropuertosLayer',\n          type: 'symbol',\n          source: 'aeropuertos',\n          layout: {\n            'icon-image': ['get', 'icon-image'],\n            'icon-size': 1.0,\n            'icon-allow-overlap': true\n          }\n        });\n      }\n    },\n    iniciarSimulacion: function iniciarSimulacion() {\n      var vue = this;\n      vue.toggleIniciarDetener = false;\n      vue.toggleReanudar = false;\n      this.isAnimating = true;\n\n      if (!this.isSimulating) {\n        this.isSimulating = true;\n        this.updateTime(); //  this.setupFlightLayers();  // Configura las capas primero\n        // this.animateFlights();  // Luego inicia la animación\n      }\n\n      ;\n      /*this.envios.forEach(envio => {\r\n           envio.ruta.vuelos.forEach(vuelo => {\r\n             vuelo.capacidadCargaUsado += envio.cantidadPaquetes;  // Incrementar capacidad usada al iniciar el vuelo\r\n             this.updateAirportCapacitiesColapse(vuelo.ciudadOrigen, -envio.cantidadPaquetes); // Disminuir capacidad usada al iniciar el vuelo\r\n           });\r\n           //this.animateEnvio(envio);\r\n         });*/\n    },\n    iniciarPlanificacion: function () {\n      var _iniciarPlanificacion = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this11 = this;\n\n        var response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return axios.get('http://localhost/api/simulacion/semanal/iniciar');\n\n              case 3:\n                response = _context2.sent;\n                console.log(\"Simulación iniciada:\", response.data);\n                _context2.next = 7;\n                return this.checkSimulationStatus();\n\n              case 7:\n                // Esperar un tiempo antes de obtener los resultados\n                setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return _this11.fetchSimulationResults();\n\n                        case 2:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), 25000); // Ajusta el tiempo de espera según sea necesario\n\n                _context2.next = 13;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.error(\"Error iniciando simulación:\", _context2.t0);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 10]]);\n      }));\n\n      function iniciarPlanificacion() {\n        return _iniciarPlanificacion.apply(this, arguments);\n      }\n\n      return iniciarPlanificacion;\n    }(),\n    checkSimulationStatus: function () {\n      var _checkSimulationStatus = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return axios.get('http://localhost/api/simulacion/semanal/estado');\n\n              case 3:\n                response = _context3.sent;\n                console.log(\"Estado de la simulación:\", response.data); // Manejar la respuesta de estado si es necesario\n\n                _context3.next = 10;\n                break;\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.error(\"Error verificando estado de simulación:\", _context3.t0);\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 7]]);\n      }));\n\n      function checkSimulationStatus() {\n        return _checkSimulationStatus.apply(this, arguments);\n      }\n\n      return checkSimulationStatus;\n    }(),\n    fetchSimulationResults: function () {\n      var _fetchSimulationResults = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var _this12 = this;\n\n        var response, fetchedVuelos, fechaInicio, fechaFin, filteredVuelos, count;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return axios.get('http://localhost/api/simulacion/semanal/resultados');\n\n              case 3:\n                response = _context4.sent;\n                console.log(\"Resultados de la simulación:\", response.data);\n                fetchedVuelos = response.data.calendarioVuelos;\n                fechaInicio = new Date('2024-01-01T00:00:00');\n                fechaFin = new Date(fechaInicio);\n                fechaFin.setDate(fechaFin.getDate() + 7);\n                filteredVuelos = {};\n                this.pendingFlights = [];\n                count = 0;\n                Object.keys(fetchedVuelos).forEach(function (fecha) {\n                  if (count >= 20) return;\n                  var fechaVuelo = new Date(fecha);\n\n                  if (fechaVuelo >= fechaInicio && fechaVuelo <= fechaFin) {\n                    console.log(fechaVuelo + \"  \" + fechaInicio + \"   \" + fechaFin);\n                    var vuelosDelDia = fetchedVuelos[fecha];\n                    filteredVuelos[fecha] = [];\n                    vuelosDelDia.forEach(function (vuelo) {\n                      if (count < 20) {\n                        vuelo.animated = false; // Agregar propiedad animated\n\n                        filteredVuelos[fecha].push(vuelo);\n\n                        _this12.pendingFlights.push(vuelo);\n\n                        count++;\n                      }\n                    });\n                  }\n                });\n                this.calendarioVuelos = filteredVuelos;\n                console.log(\"Vuelos disponibles ACTUALIZADOS:\", filteredVuelos);\n                _context4.next = 20;\n                break;\n\n              case 17:\n                _context4.prev = 17;\n                _context4.t0 = _context4[\"catch\"](0);\n                console.error(\"Error obteniendo resultados de la simulación:\", _context4.t0);\n\n              case 20:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 17]]);\n      }));\n\n      function fetchSimulationResults() {\n        return _fetchSimulationResults.apply(this, arguments);\n      }\n\n      return fetchSimulationResults;\n    }(),\n    animateFlights: function animateFlights() {\n      var _this13 = this;\n\n      console.log(\"Animating Flights with filtered flights:\", JSON.stringify(this.filteredVuelos, null, 2));\n      this.filteredVuelos.forEach(function (vuelo) {\n        _this13.animateFlight(vuelo);\n      });\n    },\n\n    /*   animateEnvio(envio) {\r\n         let currentFlight = 0;\r\n         const moveNextFlight = () => {\r\n           if (currentFlight < envio.ruta.vuelos.length) {\r\n             this.animateFlight(envio.ruta.vuelos[currentFlight],envio.cantidadPaquetes ,envio.id, () => {\r\n               currentFlight++;\r\n               moveNextFlight();\r\n             });\r\n           }\r\n         };\r\n         moveNextFlight();\r\n       },\r\n    \n    */\n    animateFlight: function animateFlight(vuelo) {\n      var _this14 = this;\n\n      if (vuelo.capacidadCargaUsado > vuelo.capacidadCargaMaxima) {\n        this.collapseReason = 'EXCESO DE PAQUETES EN VUELOS';\n        console.log(\"Collapse detected!\"); //this.showCollapseAlert(\"collapseReason\", \"llapseDetails\");\n\n        this.handleCollapse();\n        return; //AVISO CON ESTO SE PODRIA PARAR EL MOVIMIENTO\n      } // console.log(`Updating capacities for ${vuelo.ciudadDestino} with ${cantidadPaquetes} packages`);\n\n\n      this.updateAirportCapacitiesColapse(vuelo.ciudadDestino, vuelo.cantidadPaquetes);\n      console.log(vuelo);\n      var sourceId = \"vuelo-\".concat(vuelo.id);\n\n      if (!this.map.getSource(sourceId)) {\n        console.log(\"Updating source \".concat(sourceId));\n        this.map.addSource(sourceId, {\n          type: 'geojson',\n          data: {\n            type: 'Feature',\n            properties: {\n              id: vuelo.id,\n              'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: vuelo.origen\n            }\n          }\n        });\n        this.map.addLayer({\n          id: \"avion-\".concat(vuelo.id),\n          type: 'symbol',\n          source: sourceId,\n          layout: {\n            'icon-image': ['get', 'icon-image'],\n            'icon-size': 0.5,\n            'icon-allow-overlap': true\n          }\n        });\n        /*   this.map.on('click', `avion-${envioId}`, (e) => {\r\n             console.log(\"LLega\");\r\n        const vueloId = e.features[0].properties.id; // Obtener el ID del vuelo del evento\r\n        const vuelo = this.envios.find(envio => envio.id === envioId).ruta.vuelos.find(v => v.id === vueloId);\r\n        this.onFlightClick(e, vuelo);\r\n        });*/\n\n        this.map.on('click', \"avion-\".concat(vuelo.id), function (e) {\n          var vueloId = e.features[0].properties.id;\n\n          var clickedVuelo = _this14.filteredVuelos.find(function (v) {\n            return v.id === vueloId;\n          });\n\n          _this14.onFlightClick(e, clickedVuelo);\n        });\n      }\n\n      console.log(\"sadas\");\n      var flightDurationMinutes = this.parseDurationToMinutes(vuelo.tiempoEstimadoVuelo);\n      var flightDurationSimulationSeconds = flightDurationMinutes * 60;\n      var realTimeSeconds = flightDurationSimulationSeconds / 360; // Convert to real time seconds based on 2160 simulated seconds = 1 real second\n      // Number of animation steps\n\n      console.log(flightDurationMinutes); //   console.log(realTimePerSimulatedSecond)\n\n      var steps = 100; // Define the total number of steps for smooth animation\n\n      var interval = realTimeSeconds * 1000 / steps;\n      console.log(steps); // let steps =336;\n\n      var currentStep = 0;\n\n      var currentPos = _toConsumableArray(vuelo.origen);\n\n      var incrementLat = (vuelo.destino[1] - vuelo.origen[1]) / steps;\n      var incrementLng = (vuelo.destino[0] - vuelo.origen[0]) / steps;\n\n      var move = function move() {\n        if (currentStep <= steps) {\n          currentPos[0] += incrementLng;\n          currentPos[1] += incrementLat;\n\n          if (_this14.map.getSource(sourceId)) {\n            _this14.map.getSource(sourceId).setData({\n              type: 'Feature',\n              geometry: {\n                type: 'Point',\n                coordinates: currentPos\n              },\n              properties: {\n                id: vuelo.id,\n                'icon-image': _this14.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\n              }\n            });\n          }\n\n          currentStep++; //  requestAnimationFrame(move);\n\n          setTimeout(move, interval);\n        }\n      };\n\n      move();\n    },\n    updateAirportCapacitiesColapse: function updateAirportCapacitiesColapse(codigoOACI, paquetes) {\n      //   console.log(`Updating capacities for ${codigoOACI} with ${paquetes} packages`);\n      this.collapseReason = 'EXCESO DE PAQUETES EN AEROPUERTOS';\n      var aeropuerto = aeropuertos.find(function (a) {\n        return a.codigoOACI === codigoOACI;\n      });\n\n      if (aeropuerto) {\n        aeropuerto.capacidadDeAlmacenamientoUsado += paquetes;\n        console.log(\"New storage used: \".concat(aeropuerto.capacidadDeAlmacenamientoUsado, \"/\").concat(aeropuerto.capacidadAlmacenamientoMaximo));\n\n        if (aeropuerto.capacidadDeAlmacenamientoUsado > aeropuerto.capacidadAlmacenamientoMaximo) {\n          console.log(\"Airport collapse detected!\");\n          var collapseReason = 'Exceso de paquetes';\n          var collapseDetails = {\n            location: 'Lima, Perú - SMTP',\n            packagesInvolved: '956'\n          };\n          this.showModal();\n        }\n      }\n    },\n    checkForCollapse: function checkForCollapse() {\n      console.log(\"Checking for collapse...\");\n\n      if (aeropuertos.some(function (aero) {\n        return aero.capacidadDeAlmacenamientoUsado > aero.capacidadAlmacenamientoMaximo;\n      }) || envios.some(function (envio) {\n        return envio.ruta.vuelos.some(function (vuelo) {\n          return vuelo.capacidadCargaUsado > vuelo.capacidadCargaMaxima;\n        });\n      })) {\n        console.log(\"Collapse detected!\");\n        this.showModal();\n      }\n    },\n    parseDurationToMinutes: function parseDurationToMinutes(duration) {\n      var regex = /PT(\\d+H)?(\\d+M)?/;\n      var matches = duration.match(regex);\n      var hours = parseInt(matches[1] || 0, 10);\n      var minutes = parseInt(matches[2] || 0, 10);\n      return hours * 60 + minutes;\n    },\n    showModal: function showModal() {\n      this.isModalVisible = true;\n      this.isVisible = true;\n      this.isVisibleResumen = true;\n    },\n    handleCollapse: function handleCollapse() {\n      console.log(\"Collapse detected!\");\n      this.isSimulating = false; // Detener la simulación\n\n      this.showModal();\n    },\n    closeCollapseModal: function closeCollapseModal() {\n      this.isVisible = false;\n    },\n    detenerSimulacion: function detenerSimulacion() {\n      var vue = this;\n      vue.toggleIniciarDetener = false;\n      vue.toggleReanudar = true;\n    },\n    reanudarSimulacion: function reanudarSimulacion() {\n      var vue = this;\n      vue.toggleIniciarDetener = false;\n      vue.toggleReanudar = false;\n    },\n    cancelarSimulacion: function cancelarSimulacion() {\n      var vue = this;\n      vue.toggleIniciarDetener = true;\n      console.log(\"SE DETIENE LA SIMULACION\");\n      clearInterval(vue.myInterval);\n      Simulation.stopSimulation();\n      console.log(vue.fecha_fin_simulacion);\n    },\n    onAirportClick: function onAirportClick(event) {\n      var feature = event.features[0];\n      var aeropuerto = this.aeropuertos.find(function (a) {\n        return a.codigoOACI === feature.properties.codigoOACI;\n      });\n      console.log(aeropuerto);\n\n      if (aeropuerto) {\n        this.openModals.push({\n          id: aeropuerto.id,\n          data: aeropuerto\n        });\n      }\n    },\n    closeAirportModal: function closeAirportModal(id) {\n      this.openModals = this.openModals.filter(function (modal) {\n        return modal.id !== id;\n      });\n    },\n    onFlightClick: function onFlightClick(event, vuelo) {\n      console.log(\"Información del vuelo clickeado:\", vuelo);\n\n      if (vuelo) {\n        this.openFlightModals.push({\n          id: \"\".concat(vuelo.id, \"-\").concat(new Date().getTime()),\n          data: vuelo\n        });\n      }\n    },\n    closeFlightModal: function closeFlightModal(id) {\n      this.openFlightModals = this.openFlightModals.filter(function (modal) {\n        return modal.id !== id;\n      });\n    }\n  },\n  computed: {\n    /*\r\n    filteredEnvios() {\r\n      const fechaInicio = new Date(this.fecha_inicio_simulacion);\r\n      const fechaFin = new Date(fechaInicio);\r\n      fechaFin.setDate(fechaFin.getDate() + 7);\r\n        const filtered = this.envios.filter(envio => {\r\n        return envio.ruta.vuelos.some(vuelo => {\r\n          const fechaSalida = new Date(`${vuelo.fechaSalida}T${vuelo.horaSalida}`);\r\n          const fechaLlegada = new Date(`${vuelo.fechaLlegada}T${vuelo.horaLlegada}`);\r\n            return fechaSalida >= fechaInicio && fechaLlegada <= fechaFin;\r\n        });\r\n      });\r\n      \r\n      return filtered;\r\n    },*/\n    filteredVuelos: function filteredVuelos() {\n      var _this15 = this;\n\n      var filtered = [];\n      Object.keys(this.calendarioVuelos).forEach(function (fecha) {\n        var vuelosDelDia = _this15.calendarioVuelos[fecha];\n        vuelosDelDia.forEach(function (vuelo) {\n          filtered.push(vuelo);\n        });\n      });\n      return filtered;\n    }\n  }\n};",{"version":3,"sources":["Maps.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  \r\n  <div class=\"map-container\">\r\n   \r\n   <div class=\"datetime-display\">\r\n     {{ currentDateTime }}\r\n   </div>\r\n   <div class=\"map-search-container\">\r\n     \r\n     <input class=\"search-input\" type=\"text\" placeholder=\"Buscar envío\">\r\n     <input class=\"search-input\" type=\"text\" placeholder=\"Buscar aeropuerto\">\r\n     <input class=\"search-input\" type=\"text\" placeholder=\"Buscar vuelo\">\r\n   </div>\r\n   <div id=\"legend\" class=\"map-legend\">\r\n <button class=\"legend-toggle\" @click=\"toggleLegend\">\r\n   {{ isLegendOpen ? '▲ Cerrar Leyenda' : '▼ Abrir Leyenda' }}\r\n </button>\r\n <ul :style=\"{ display: isLegendOpen ? 'block' : 'none' }\" class=\"legend-content\">\r\n  \r\n   <li><span class=\"dot greater-80\"></span>Menor a 50%</li>\r\n   <li><span class=\"dot between-50-80\"></span>Entre 50% y 80%</li>\r\n   <li><span class=\"dot less-50\"></span>Mayor a 80%</li>\r\n   <li><span class=\"icon airplane-icon\"></span>Vuelo</li>\r\n   <li><span class=\"icon airport-icon\"></span>Aeropuerto</li>\r\n </ul>\r\n</div>\r\n\r\n   \r\n<MglMap\r\n   class=\"main-map\"\r\n   :accessToken=\"accessToken\"\r\n   :mapStyle=\"mapStyle\"\r\n   :center=\"center\"\r\n   :zoom=\"zoom\"\r\n   style=\"height:750px!important;\"\r\n   @load=\"onMapLoaded\"\r\n >\r\n />\r\n   <!-- Antes estaba asi si puede cambiar algo para despues\r\n <MglNavigationControl\r\n        position=\"top-center\">\r\n      </MglNavigationControl> \r\n    -->\r\n <MglGeojsonLayer\r\n        :sourceId=\"'aeropuertos'\"\r\n        :layerId=\"'aeropuertosLayer'\"\r\n        :type=\"'symbol'\"\r\n        :source=\"geojsonAeropuertos\"\r\n        :layout=\"{\r\n          'icon-image': ['get', 'icon-image'],\r\n          'icon-size': 1.0,\r\n          'icon-allow-overlap': true\r\n        }\"\r\n        @click=\"onAirportClick\"\r\n      />\r\n\r\n\r\n  <MglGeojsonLayer\r\n  v-for=\"(vuelo, index) in filteredVuelos\"\r\n  :key=\"`vuelo-layer-${index}`\"\r\n  :sourceId=\"`vuelo-${index}`\"\r\n  :layerId=\"`avion-${index}`\"\r\n  :type=\"'symbol'\"\r\n  :source=\"createGeojsonSourceForVuelo(vuelo)\"\r\n  :layout=\"{\r\n    'icon-image': ['get', 'icon-image'],\r\n    'icon-size': 1.0,\r\n    'icon-allow-overlap': true\r\n  }\"\r\n  @click=\"onFlightClick\"\r\n/>\r\n\r\n        <!-- Antes estaba asi si puede cambiar algo para despues\r\n    <MglGeojsonLayer\r\n      v-for=\"(envio, index) in envios\"\r\n      :key=\"`envio-layer-${index}`\"\r\n      :sourceId=\"`envio-${index}`\"\r\n      :layerId=\"`avionLayer-${envio.id}`\"\r\n      :type=\"'symbol'\"\r\n      :source=\"createGeojsonSourceForEnvio(envio)\"\r\n      :layout=\"{\r\n        'icon-image': ['get', 'icon-image'],\r\n        'icon-size': 1.0,\r\n        'icon-allow-overlap': true\r\n      }\"\r\n      @click=\"onFlightClick\"\r\n    />\r\n    -->\r\n </MglMap>\r\n\r\n <div class=\"row\" style=\"margin-top:40px!important\"> \r\n      <div class=\"col-md-3 pr-md-1\">\r\n        <base-input label=\"Fecha Inicio\"\r\n                  type=\"date\"\r\n                  format= \"yyyy-MM-dd\"\r\n                  placeholder=\"Fecha Inicio\"\r\n                  v-model=\"fecha_inicio_simulacion\">\r\n        </base-input>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div v-for=\"modal in openFlightModals\" :key=\"modal.id\" class=\"modal-overlay-flight\" @click=\"closeFlightModal(modal.id)\">\r\n  <div class=\"modal-content-flight\" @click.stop>\r\n    <h2>Información del Vuelo</h2>\r\n    <p><strong>Ciudad Origen:</strong> {{ modal.data.ciudadOrigen }}</p>\r\n    <p><strong>Ciudad Destino:</strong> {{ modal.data.ciudadDestino }}</p>\r\n    <p><strong>Hora de Salida:</strong> {{ modal.data.horaSalida }}</p>\r\n    <p><strong>Hora de Llegada:</strong> {{ modal.data.horaLlegada }}</p>\r\n    <p><strong>Capacidad de Carga Máxima:</strong> {{ modal.data.capacidadCargaMaxima }}</p>\r\n    <p><strong>Capacidad de Carga Usado:</strong> {{ modal.data.capacidadCargaUsado }}</p>\r\n    <p><strong>Fecha de Salida:</strong> {{ modal.data.fechaHoraSalidaGMT0 }}</p>\r\n    <p><strong>Fecha de Llegada:</strong> {{ modal.data.fechaHoraLlegadaGMT0 }}</p>\r\n    <p><strong>Tiempo Estimado de Vuelo:</strong> {{ modal.data.tiempoEstimadoVuelo }}</p>\r\n    <button class=\"modal-button-flight\" @click=\"closeFlightModal(modal.id)\">Cerrar</button>\r\n  </div>\r\n</div>\r\n\r\n <div v-for=\"modal in openModals\" :key=\"modal.id\" class=\"modal-overlay-airport\" @click=\"closeAirportModal(modal.id)\">\r\n      <div class=\"modal-content-airport\" @click.stop>\r\n        <h2>Información del Aeropuerto</h2>\r\n        <p><strong>Nombre:</strong> {{ modal.data.nombreCiudad }}</p>\r\n        <p><strong>País:</strong> {{ modal.data.pais }}</p>\r\n        <p><strong>Capacidad de Almacenamiento Máximo:</strong> {{ modal.data.capacidadAlmacenamientoMaximo }}</p>\r\n        <p><strong>Capacidad de Almacenamiento Usado:</strong> {{ modal.data.capacidadDeAlmacenamientoUsado }}</p>\r\n        <p><strong>Coordenadas:</strong> {{ modal.data.coordinates.join(', ') }}</p>\r\n        <button class=\"modal-button-airport\" @click=\"closeAirportModal(modal.id)\">Cerrar</button>\r\n      </div>\r\n    </div>\r\n   <!-- <div id=\"map\" style=\"height:750px!important;\"></div> -->\r\n\r\n\r\n  <div v-if=\"isVisibleResumen\" >\r\n    <button class=\"modal-button\" @click=\"showModal\">Mostrar resumen de colapso</button>\r\n\r\n  </div>\r\n  <div v-if=\"isVisible\" class=\"modal-overlay\" @click=\"closeCollapseModal\">\r\n    <div class=\"modal-content\" @click.stop>\r\n      <div class=\"collapse-icon\"></div> <!-- Icono de colapso -->\r\n      <h2>COLAPSO LOGÍSTICO</h2>\r\n      <p>El sistema ha colapsado debido a un <strong>{{ collapseReason }}</strong>.</p>\r\n      <p><strong>Detalles del Colapso:</strong></p>\r\n      <ul>\r\n        <li><strong>Motivo:</strong> EXCESO DE PAQUETES EN AEROPUERTOS</li>\r\n        <li><strong>Lugar:</strong> Lima, Perú - SMTP</li>\r\n        <li><strong>Fecha:</strong> {{ currentDateTime }}</li>\r\n        <li><strong>Almacenes o Vuelos afectados:</strong> Brasil, Brasilia; New York, USA; Cali, Colombia</li>\r\n      </ul>\r\n      <button class=\"modal-button\" @click=\"closeCollapseModal\">Intentar de nuevo</button>\r\n    </div>\r\n  </div>\r\n\r\n\r\n   <div class=\"row\">\r\n     <div class=\"col-md-3\" style=\"margin-top:40px!important\" v-show=\"toggleIniciarDetener\"> \r\n       <b-button  v-b-modal.modal-iniciar slot=\"footer\" type=\"primary\" fill>Iniciar</b-button>\r\n       <b-modal id=\"modal-iniciar\"\r\n           @ok=\"iniciarSimulacion\">\r\n           ¿Deseas iniciar la simulación?\r\n       </b-modal>\r\n     </div>\r\n     <div class=\"col-md-3\" style=\"margin-top:40px!important\" v-show=\"!toggleIniciarDetener\"> \r\n       <b-button  v-b-modal.modal-cancelar slot=\"footer\" type=\"primary\" fill>Cancelar</b-button>\r\n       <b-modal id=\"modal-cancelar\"\r\n           @ok=\"cancelarSimulacion\">\r\n           ¿Deseas cancelar la simulación?\r\n       </b-modal>\r\n     </div>\r\n     <div class=\"col-md-3\" style=\"margin-top:40px!important\" v-show=\"!toggleIniciarDetener && !toggleReanudar\"> \r\n       <b-button  v-b-modal.modal-detener slot=\"footer\" type=\"primary\" fill>Detener</b-button>\r\n       <b-modal id=\"modal-detener\"\r\n           @ok=\"detenerSimulacion\">\r\n           ¿Deseas detener la simulacion?\r\n       </b-modal>\r\n     </div>\r\n     <div class=\"col-md-3\" style=\"margin-top:40px!important\" v-show=\"!toggleIniciarDetener && toggleReanudar\"> \r\n       <b-button  v-b-modal.modal-reanudar slot=\"footer\" type=\"primary\" fill>Reanudar</b-button>\r\n       <b-modal id=\"modal-reanudar\"\r\n           @ok=\"reanudarSimulacion\">\r\n           ¿Deseas reanudar la simulación?\r\n       </b-modal>\r\n     </div>\r\n     <div class=\"col-md-3\" style=\"margin-top:40px!important\">\r\n        <b-button @click=\"iniciarPlanificacion\" type=\"primary\" fill>Iniciar Planificacion</b-button>\r\n      </div>\r\n   \r\n   </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Mapbox from \"mapbox-gl\";\r\nimport {MglMap, MglNavigationControl, MglGeojsonLayer} from \"vue-mapbox\";\r\nimport Mapa from '@/store/map.json';\r\nimport Mapa2 from '@/store/map2.json';\r\nimport axios from 'axios';\r\nimport Authentication from '@/store/authentication.js';\r\nimport Simulation from '@/store/simulation.js';\r\n\r\n\r\nconst \r\naeropuertos = [\r\n/*{\r\n        id: 0,\r\n        codigoOACI: \"SKBO\",\r\n        nombreCiudad: \"Bogotá\",\r\n        pais: \"Colombia\",\r\n        codigoIATA: \"bogo\",\r\n        husoHorario: -5,\r\n        capacidadAlmacenamientoMaximo: 430,\r\n        capacidadDeAlmacenamientoUsado: 400,\r\n        latitud: \"4.70139\",\r\n        longitud: \"-74.1469\",\r\n        coordinates: [\"-74.1469\", \"4.70139\"],\r\n        usoAlmacenamiento: {}\r\n      },\r\n      {\r\n        id: 1,\r\n        codigoOACI: \"SEQM\",\r\n        nombreCiudad: \"Quito\",\r\n        pais: \"Ecuador\",\r\n        codigoIATA: \"quit\",\r\n        husoHorario: -5,\r\n        capacidadAlmacenamientoMaximo: 410,\r\n        capacidadDeAlmacenamientoUsado: 240,\r\n        latitud: \"0.113333\",\r\n        longitud: \"-78.3583\",\r\n        coordinates: [\"-78.3583\", \"0.113333\"],\r\n        usoAlmacenamiento: {}\r\n      },\r\n      {\r\n        id: 2,\r\n        codigoOACI: \"SVMI\",\r\n        nombreCiudad: \"Caracas\",\r\n        pais: \"Venezuela\",\r\n        codigoIATA: \"cara\",\r\n        husoHorario: -4,\r\n        capacidadAlmacenamientoMaximo: 400,\r\n        capacidadDeAlmacenamientoUsado: 0,\r\n        latitud: \"10.6031\",\r\n        longitud: \"-66.9903\",\r\n        coordinates: [\"-66.9903\", \"10.6031\"],\r\n        usoAlmacenamiento: {}\r\n      },\r\n      {\r\n        id: 3,\r\n        codigoOACI: \"SBBR\",\r\n        nombreCiudad: \"Brasilia\",\r\n        pais: \"Brasil\",\r\n        codigoIATA: \"bras\",\r\n        husoHorario: -3,\r\n        capacidadAlmacenamientoMaximo: 480,\r\n        capacidadDeAlmacenamientoUsado: 0,\r\n        latitud: \"-15.8645\",\r\n        longitud: \"-47.9178\",\r\n        coordinates: [\"-47.9178\", \"-15.8645\"],\r\n        usoAlmacenamiento: {}\r\n      }*/\r\n    ];\r\n\r\n\r\n    const calendarioVuelos = {\r\n      \"2024-01-11\": [\r\n            {\r\n                \"id\": 1,\r\n                \"ciudadOrigen\": \"RKSI\",\r\n                \"ciudadDestino\": \"LOWW\",\r\n                \"horaSalida\": \"00:01:00\",\r\n                \"horaLlegada\": \"20:36:00\",\r\n                \"capacidadCargaMaxima\": 340,\r\n                \"capacidadCargaUsado\": 0,\r\n                \"fechaSalida\": \"2024-01-02\",\r\n                \"fechaLlegada\": \"2024-01-02\",\r\n                \"tiempoEstimadoVuelo\": \"PT3H35M\",\r\n                \"fechaHoraSalidaGMT0\": \"2024-01-10T15:01:00\",\r\n                \"fechaHoraLlegadaGMT0\": \"2024-01-10T18:36:00\",\r\n                \"latitud\": \"37Â° 27' 48\\\" N\",\r\n                \"longitud\": \"126Â° 26' 24\\\" E\",\r\n                \"origen\": [\r\n                    126.44,\r\n                    37.46333333333334\r\n                ],\r\n                \"destino\": [\r\n                    16.570833333333333,\r\n                    48.11083333333333\r\n                ]\r\n            },\r\n            {\r\n                \"id\": 2,\r\n                \"ciudadOrigen\": \"RKSI\",\r\n                \"ciudadDestino\": \"VTBS\",\r\n                \"horaSalida\": \"00:09:00\",\r\n                \"horaLlegada\": \"03:31:00\",\r\n                \"capacidadCargaMaxima\": 340,\r\n                \"capacidadCargaUsado\": 0,\r\n                \"fechaSalida\": \"2024-01-02\",\r\n                \"fechaLlegada\": \"2024-01-02\",\r\n                \"tiempoEstimadoVuelo\": \"PT5H22M\",\r\n                \"fechaHoraSalidaGMT0\": \"2024-01-10T15:09:00\",\r\n                \"fechaHoraLlegadaGMT0\": \"2024-01-10T20:31:00\",\r\n                \"latitud\": \"37Â° 27' 48\\\" N\",\r\n                \"longitud\": \"126Â° 26' 24\\\" E\",\r\n                \"origen\": [\r\n                    126.44,\r\n                    37.46333333333334\r\n                ],\r\n                \"destino\": [\r\n                    100.74722222222222,\r\n                    13.680833333333332\r\n                ]\r\n            },\r\n            {\r\n                \"id\": 3,\r\n                \"ciudadOrigen\": \"RKSI\",\r\n                \"ciudadDestino\": \"UMMS\",\r\n                \"horaSalida\": \"00:20:00\",\r\n                \"horaLlegada\": \"22:03:00\",\r\n                \"capacidadCargaMaxima\": 300,\r\n                \"capacidadCargaUsado\": 0,\r\n                \"fechaSalida\": \"2024-01-02\",\r\n                \"fechaLlegada\": \"2024-01-02\",\r\n                \"tiempoEstimadoVuelo\": \"PT3H43M\",\r\n                \"fechaHoraSalidaGMT0\": \"2024-01-10T15:20:00\",\r\n                \"fechaHoraLlegadaGMT0\": \"2024-01-10T19:03:00\",\r\n                \"latitud\": \"37Â° 27' 48\\\" N\",\r\n                \"longitud\": \"126Â° 26' 24\\\" E\",\r\n                \"origen\": [\r\n                    126.44,\r\n                    37.46333333333334\r\n                ],\r\n                \"destino\": [\r\n                    28.0325,\r\n                    53.8825\r\n                ]\r\n            },\r\n          ]\r\n    };\r\n\r\n\r\nconst       envios = [\r\n      {\r\n        id: 0,\r\n        idEnvio: \"SBBR000000001\",\r\n        ciudadOrigen: \"SBBR\",\r\n        ciudadDestino: \"SEQM\",\r\n        fechaEnvio: \"2024-03-03\",\r\n        horaEnvio: \"00:01:00\",\r\n        cantidadPaquetes: 2,\r\n       // estadoEnvio: null,\r\n        ruta: {\r\n          id: 0,\r\n          vuelos: [\r\n            {\r\n              id: 0,\r\n              ciudadOrigen: \"SBBR\",\r\n              ciudadDestino: \"SEQM\",\r\n              horaSalida: \"02:16:00\",\r\n              horaLlegada: \"14:08:00\",\r\n              capacidadCargaMaxima: 340,\r\n              capacidadCargaUsado: 300,\r\n              fechaSalida: \"2024-03-03\",\r\n              fechaLlegada: \"2024-03-03\",\r\n              tiempoEstimadoVuelo: \"PT6H52M\",\r\n              origen: [-47.9178, -15.8645], // Bogotá\r\n              destino: [-78.3583, 0.113333], // Quito\r\n            }\r\n          ],\r\n          fitness: 33908.51018350059,\r\n          cantidadVuelos: 1\r\n        }\r\n      },\r\n      {\r\n        id: 1,\r\n        idEnvio: \"SVMI000000001\",\r\n        ciudadOrigen: \"SVMI\",\r\n        ciudadDestino: \"SKBO\",\r\n        fechaEnvio: \"2024-01-03\",\r\n        horaEnvio: \"00:03:00\",\r\n        cantidadPaquetes: 2,\r\n      //  estadoEnvio: null,\r\n        ruta: {\r\n          id: 1,\r\n          vuelos: [\r\n            {\r\n              id: 1,\r\n              ciudadOrigen: \"SVMI\",\r\n              ciudadDestino: \"SBBR\",\r\n              horaSalida: \"02:05:00\",\r\n              horaLlegada: \"07:28:00\",\r\n              capacidadCargaMaxima: 300,\r\n              capacidadCargaUsado: 2,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-03\",\r\n              tiempoEstimadoVuelo: \"PT6H23M\",\r\n              origen: [-66.9903, 10.6031], // Bogotá\r\n              destino:[-47.9178, -15.8645], // Quito\r\n            },\r\n            {\r\n              id: 2,\r\n              ciudadOrigen: \"SBBR\",\r\n              ciudadDestino: \"SEQM\",\r\n              horaSalida: \"15:33:00\",\r\n              horaLlegada: \"17:14:00\",\r\n              capacidadCargaMaxima: 300,\r\n              capacidadCargaUsado: 280,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-03\",\r\n              tiempoEstimadoVuelo: \"PT2H41M\",\r\n              origen:[-47.9178, -15.8645], // Bogotá\r\n              destino: [-78.3583, 0.113333],  // Quito\r\n            },\r\n            {\r\n              id: 3,\r\n              ciudadOrigen: \"SEQM\",\r\n              ciudadDestino: \"SKBO\",\r\n              horaSalida: \"19:28:00\",\r\n              horaLlegada: \"06:08:00\",\r\n              capacidadCargaMaxima: 360,\r\n              capacidadCargaUsado: 390,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-04\",\r\n              tiempoEstimadoVuelo: \"PT15H40M\",\r\n              origen: [-78.3583, 0.113333], // Bogotá\r\n              destino:  [-74.1469, 4.70139],  // Quito\r\n            }\r\n\r\n          ],\r\n          fitness: 32067.93361867229,\r\n          cantidadVuelos: 3\r\n        }\r\n      }\r\n    ];\r\n\r\n\r\n\r\n\r\nexport default {\r\n  props: ['title', 'content', 'isVisible','isVisibleResumen'],\r\n components: {\r\n   MglMap,\r\n   MglNavigationControl,\r\n   MglGeojsonLayer\r\n },\r\n data() {\r\n   return {\r\n    simulationDateTime: null,\r\n    simulationInterval: null,\r\n    realTimePerSimulatedSecond: 1000 / (60 * 6), // 1 second real time = 6 minutes simulated time\r\n    openModals: [],\r\n    openFlightModals: [],\r\n    isModalVisible: false,\r\n    isVisibleResumen: false,\r\n    isVisible: false,\r\n    collapseReason: \"\",\r\n     isLegendOpen: false,\r\n     isAnimating: false,\r\n     envios: envios,\r\n     calendarioVuelos: {},\r\n     currentDateTime: new Date().toLocaleString('es-ES', { \r\n       timeZone: 'America/Lima', \r\n       year: 'numeric',\r\n       month: '2-digit',\r\n       day: '2-digit',\r\n       hour: '2-digit', \r\n       minute: '2-digit', \r\n       timeZoneName: 'short' \r\n     }),\r\n     toggleIniciarDetener: true,\r\n     toggleReanudar: false,\r\n     accessToken: this.$store.state.map.token, // your access token. Needed if you using Mapbox maps\r\n     mapStyle: 'mapbox://styles/mapbox/dark-v10',\r\n     center: [5,15],\r\n     zoom: 2,\r\n    \r\n\r\n     myInterval: null,\r\n     myIntervalReplan:null,\r\n\r\n     fecha_inicio_simulacion: '',\r\n     fecha_fin_simulacion: null,\r\n\r\n     type: [\"\", \"info\", \"success\", \"warning\", \"danger\"],\r\n     notifications: {\r\n       topCenter: false\r\n     },\r\n\r\n     geojsonAeropuertos: {\r\n       type: 'FeatureCollection',\r\n       features: aeropuertos.map(a => ({\r\n         type: 'Feature',\r\n         geometry: {\r\n           type: 'Point',\r\n           coordinates: a.coordinates\r\n         },\r\n         properties: {\r\n            ...a,\r\n            'icon-image': this.calculateIcon(a.capacidadDeAlmacenamientoUsado / a.capacidadAlmacenamientoMaximo)\r\n          }\r\n       }))\r\n     },\r\n\r\n\r\n\r\n     createGeojsonSourceForEnvio(envio) {\r\n  return {\r\n    type: 'FeatureCollection',\r\n    features: envio.ruta.vuelos.map(vuelo => ({\r\n      type: 'Feature',\r\n      properties: {\r\n        id: vuelo.id,\r\n        'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\r\n      },\r\n      geometry: {\r\n        type: 'Point',\r\n        coordinates: vuelo.origen\r\n      }\r\n    }))\r\n  };\r\n},\r\n\r\n  createGeojsonSourceForVuelo(vuelo) {\r\n    return {\r\n      type: 'FeatureCollection',\r\n      features: [{\r\n        type: 'Feature',\r\n        properties: {\r\n          id: vuelo.id,\r\n          'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\r\n        },\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: vuelo.origen\r\n        }\r\n      }]\r\n    };\r\n  },\r\n  // Otras funciones...\r\n\r\n \r\n      envios: [\r\n      {\r\n        id: 0,\r\n        idEnvio: \"SBBR000000001\",\r\n        ciudadOrigen: \"SBBR\",\r\n        ciudadDestino: \"SEQM\",\r\n        fechaEnvio: \"2024-03-03\",\r\n        horaEnvio: \"00:01:00\",\r\n        cantidadPaquetes: 2,\r\n        estadoEnvio: null,\r\n        ruta: {\r\n          id: 0,\r\n          vuelos: [\r\n            {\r\n              id: 0,\r\n              ciudadOrigen: \"SBBR\",\r\n              ciudadDestino: \"SEQM\",\r\n              horaSalida: \"02:16:00\",\r\n              horaLlegada: \"14:08:00\",\r\n              capacidadCargaMaxima: 340,\r\n              capacidadCargaUsado: 300,\r\n              fechaSalida: \"2024-03-03\",\r\n              fechaLlegada: \"2024-03-03\",\r\n              tiempoEstimadoVuelo: \"PT6H52M\",\r\n              origen: [-47.9178, -15.8645], // Bogotá\r\n              destino: [-78.3583, 0.113333], // Quito\r\n            }\r\n          ],\r\n          fitness: 33908.51018350059,\r\n          cantidadVuelos: 1\r\n        }\r\n      },\r\n      {\r\n        id: 1,\r\n        idEnvio: \"SVMI000000001\",\r\n        ciudadOrigen: \"SVMI\",\r\n        ciudadDestino: \"SKBO\",\r\n        fechaEnvio: \"2024-01-03\",\r\n        horaEnvio: \"00:03:00\",\r\n        cantidadPaquetes: 2,\r\n        estadoEnvio: null,\r\n        ruta: {\r\n          id: 1,\r\n          vuelos: [\r\n            {\r\n              id: 1,\r\n              ciudadOrigen: \"SVMI\",\r\n              ciudadDestino: \"SBBR\",\r\n              horaSalida: \"02:05:00\",\r\n              horaLlegada: \"07:28:00\",\r\n              capacidadCargaMaxima: 300,\r\n              capacidadCargaUsado: 2,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-03\",\r\n              tiempoEstimadoVuelo: \"PT6H23M\",\r\n              origen: [-66.9903, 10.6031], // Bogotá\r\n              destino:[-47.9178, -15.8645], // Quito\r\n            },\r\n            {\r\n              id: 2,\r\n              ciudadOrigen: \"SBBR\",\r\n              ciudadDestino: \"SEQM\",\r\n              horaSalida: \"15:33:00\",\r\n              horaLlegada: \"17:14:00\",\r\n              capacidadCargaMaxima: 300,\r\n              capacidadCargaUsado: 280,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-03\",\r\n              tiempoEstimadoVuelo: \"PT2H41M\",\r\n              origen:[-47.9178, -15.8645], // Bogotá\r\n              destino: [-78.3583, 0.113333],  // Quito\r\n            },\r\n            {\r\n              id: 3,\r\n              ciudadOrigen: \"SEQM\",\r\n              ciudadDestino: \"SKBO\",\r\n              horaSalida: \"19:28:00\",\r\n              horaLlegada: \"06:08:00\",\r\n              capacidadCargaMaxima: 360,\r\n              capacidadCargaUsado: 390,\r\n              fechaSalida: \"2024-01-03\",\r\n              fechaLlegada: \"2024-01-04\",\r\n              tiempoEstimadoVuelo: \"PT15H40M\",\r\n              origen: [-78.3583, 0.113333], // Bogotá\r\n              destino:  [-74.1469, 4.70139],  // Quito\r\n            }\r\n\r\n          ],\r\n          fitness: 32067.93361867229,\r\n          cantidadVuelos: 3\r\n        }\r\n      }\r\n    ],\r\n     currentFlightIndex: 0,\r\n     isSimulating: false,\r\n    \r\n    \r\n     \r\n   }\r\n },\r\n mounted(){\r\n  console.log(\"Aeropuertos disponibles:\", aeropuertos);\r\n  console.log(\"Vuelos disponibles:\", calendarioVuelos);\r\n\r\n  this.fetchAeropuertos();\r\n   let vue = this;\r\n   this.updateTime();\r\n   this.map.on('load', () => {\r\n    this.loadImages(() => {\r\n      this.setupAirportLayer();\r\n      \r\n      setInterval(() => {\r\n        this.updateAirportCapacities();\r\n        this.updateFlightCapacities();\r\n        this.checkForCollapse();\r\n      }, 1000);  // Actualiza cada segundo\r\n    });\r\n  });\r\n },\r\n destroyed(){\r\n  clearInterval(this.setInterval); \r\n },\r\n methods: {\r\n  fetchAeropuertos() {\r\n    axios.get('http://localhost/api/aeropuertos')\r\n      .then(response => {\r\n        this.aeropuertos = response.data;\r\n        this.geojsonAeropuertos.features = this.aeropuertos.map(a => ({\r\n          type: 'Feature',\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: a.coordinates\r\n          },\r\n          properties: {\r\n            ...a,\r\n            'icon-image': this.calculateIcon(a.capacidadDeAlmacenamientoUsado / a.capacidadAlmacenamientoMaximo)\r\n          }\r\n        }));\r\n        if (this.map && this.map.getSource('aeropuertos')) {\r\n          this.map.getSource('aeropuertos').setData(this.geojsonAeropuertos);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error fetching aeropuertos:\", error);\r\n      });\r\n  },\r\n\r\n   toggleLegend() {\r\n     this.isLegendOpen = !this.isLegendOpen;\r\n   },\r\n\r\n\r\n   calculateIcon(capacityRatio) {\r\n    if (capacityRatio < 0.50) return 'airport-green';\r\n    else if (capacityRatio < 0.80) return 'airport-orange';\r\n    return 'airport-red';\r\n  },\r\n\r\n\r\n  \r\n  calculateFlightIcon(capacidadCargaUsado, capacidadCargaMaxima) {\r\n  const ratio = capacidadCargaUsado / capacidadCargaMaxima;\r\n  if (ratio < 0.50) return 'flight-green';  // Ensure these icons exist in your Mapbox style\r\n  else if (ratio < 0.80) return 'flight-orange';\r\n  else return 'flight-red';\r\n},\r\n\r\n\r\n\r\n  updateAirportCapacities() {\r\n  this.geojsonAeropuertos.features = this.aeropuertos.map(a => {\r\n    let usageRatio = a.capacidadDeAlmacenamientoUsado / a.capacidadAlmacenamientoMaximo;\r\n    return {\r\n      type: 'Feature',\r\n      geometry: {\r\n        type: 'Point',\r\n        coordinates: a.coordinates\r\n      },\r\n      properties: {\r\n        ...a,\r\n        'icon-image': this.calculateIcon(usageRatio) // Asegúrate de que la propiedad se llama 'icon-image'\r\n      }\r\n    };\r\n  });\r\n  if (this.map && this.map.getSource('aeropuertos')) {\r\n    this.map.getSource('aeropuertos').setData(this.geojsonAeropuertos);\r\n  }\r\n},\r\n\r\n\r\n\r\n\r\nupdateFlightCapacities() {\r\n  this.envios.forEach(envio => {\r\n    envio.ruta.vuelos.forEach(vuelo => {\r\n      // Aquí podrías actualizar la capacidad usada basado en alguna lógica o simulación\r\n      vuelo.capacidadCargaUsado = Math.max(0, Math.min(vuelo.capacidadCargaMaxima, vuelo.capacidadCargaUsado + (Math.random() * 20 - 10)));\r\n      this.updateFlightOnMap(vuelo, envio.id);\r\n    });\r\n  });\r\n},\r\n\r\n\r\n\r\nupdateFlightOnMap(vuelo, envioId) {\r\n  if ( vuelo.capacidadCargaUsado > vuelo.capacidadCargaMaxima) {\r\n    console.log(\"Collapse detected!\");\r\n    this.showModal();\r\n  }\r\n  const sourceId = `envio-${envioId}`;\r\n    if (this.map.getSource(sourceId)) {\r\n      this.map.getSource(sourceId).setData({\r\n        type: 'Feature',\r\n        properties: {\r\n          id: vuelo.id,\r\n          'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\r\n        },\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: vuelo.origen\r\n        }\r\n      });\r\n    } else {\r\n      console.error(`Source ${sourceId} not found!`);\r\n    }\r\n  \r\n\r\n},\r\n\r\n\r\n  \r\nupdateTime() {\r\n    if (!this.fecha_inicio_simulacion) {\r\n      console.error(\"Fecha de inicio de simulación no está definida\");\r\n      return;\r\n    }\r\n\r\n    //const startDateTime = new Date(this.fecha_inicio_simulacion + 'T00:00:00Z');\r\n    const startDateTime = new Date('2024-01-07T14:30:00Z');\r\n    \r\n    this.simulationDateTime = startDateTime;\r\n    this.updateCurrentDateTimeDisplay();\r\n\r\n    this.simulationInterval = setInterval(() => {\r\n      this.simulationDateTime = new Date(this.simulationDateTime.getTime() + 360000); // Agregar// Agregar 6 minutos al tiempo de simulación cada segundo en tiempo real\r\n      this.updateCurrentDateTimeDisplay();\r\n      this.checkAndAnimateFlights();\r\n    }, 1000);\r\n  },\r\n\r\n  checkAndAnimateFlights() {\r\n    const currentTime = this.simulationDateTime.getTime();\r\n    console.log(`Tiempo de simulación actual: ${new Date(currentTime).toISOString()}`);\r\n    this.pendingFlights.forEach(vuelo => {\r\n      const vueloStartTime = new Date(vuelo.fechaHoraSalidaGMT0).getTime();\r\n\r\nconst cincoHorasEnMilisegundos = 5 * 60 * 60 * 1000; // 5 horas convertidas a milisegundos\r\nconst nuevoVueloStartTime = new Date(vueloStartTime - cincoHorasEnMilisegundos);\r\n      if (currentTime >= nuevoVueloStartTime && !vuelo.animated) {\r\n        vuelo.animated = true; // Marcar el vuelo como animado\r\n        console.log(`Animando vuelo con ID ${vuelo.id} a las ${new Date(vueloStartTime).toISOString()}`);\r\n        this.animateFlight(vuelo);\r\n      }\r\n    });\r\n    this.pendingFlights = this.pendingFlights.filter(vuelo => !vuelo.animated); // Remover los vuelos animados\r\n  },\r\n  updateCurrentDateTimeDisplay() {\r\n    this.currentDateTime = this.simulationDateTime.toLocaleString('es-ES', {\r\n      timeZone: 'UTC',\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      timeZoneName: 'short'\r\n    });\r\n  },\r\n\r\nloadImages(callback) {\r\n  let imagesToLoad = ['airport-green', 'airport-orange', 'airport-red', 'flight-green', 'flight-orange', 'flight-red'];\r\n  let loadedImages = 0;\r\n  const totalImages = imagesToLoad.length;\r\n  const imageLoaded = () => {\r\n   loadedImages++;\r\n   if (loadedImages === imagesToLoad.length ) {\r\n     callback();\r\n   }\r\n };\r\n  imagesToLoad.forEach(icon => {\r\n    this.map.loadImage(`/img/${icon}.png`, (error, image) => {\r\n      if (error) {\r\n        console.error(`Error loading image: /img/${icon}.png`, error);\r\n        return;\r\n      }\r\n      this.map.addImage(icon, image);\r\n      loadedImages++;\r\n      imageLoaded();\r\n    });\r\n  });\r\n},\r\n\r\n\r\nonMapLoaded(event) {\r\n  // Establecer referencia al mapa en componente y store global si es necesario\r\n  this.map = event.map;\r\n  this.$store.map = event.map;\r\n\r\n  // Cargar todas las imágenes necesarias antes de configurar las capas\r\n  this.loadImages(() => {\r\n    // Una vez que las imágenes estén cargadas, configurar las capas\r\n    this.setupAirportLayer(); // Configurar la capa de aeropuertos primero\r\n   // this.setupFlightLayers(); // Configurar las capas de vuelos después\r\n   this.map.on('click', 'aeropuertosLayer', this.onAirportClick);\r\n\r\n    // Animar vuelos solo después de que todo está correctamente configurado\r\n    this.animateFlights();  // Luego inicia la animación\r\n    \r\n  });\r\n},\r\n\r\n\r\nsetupAirportLayer() {\r\n  if (!this.map.getSource('aeropuertos')) {\r\n    this.map.addSource('aeropuertos', {\r\n      type: 'geojson',\r\n      data: this.geojsonAeropuertos\r\n    });\r\n  }\r\n\r\n  if (!this.map.getLayer('aeropuertosLayer')) {\r\n    this.map.addLayer({\r\n      id: 'aeropuertosLayer',\r\n      type: 'symbol',\r\n      source: 'aeropuertos',\r\n      layout: {\r\n        'icon-image': ['get', 'icon-image'],\r\n        'icon-size': 1.0,\r\n        'icon-allow-overlap': true\r\n      }\r\n    });\r\n  }\r\n},\r\n\r\n\r\niniciarSimulacion() {\r\n let vue = this;\r\n vue.toggleIniciarDetener = false;\r\n vue.toggleReanudar = false;\r\n this.isAnimating = true;\r\n if (!this.isSimulating) {\r\n   this.isSimulating = true;\r\n   this.updateTime(); \r\n //  this.setupFlightLayers();  // Configura las capas primero\r\n  // this.animateFlights();  // Luego inicia la animación\r\n };\r\n /*this.envios.forEach(envio => {\r\n      envio.ruta.vuelos.forEach(vuelo => {\r\n        vuelo.capacidadCargaUsado += envio.cantidadPaquetes;  // Incrementar capacidad usada al iniciar el vuelo\r\n        this.updateAirportCapacitiesColapse(vuelo.ciudadOrigen, -envio.cantidadPaquetes); // Disminuir capacidad usada al iniciar el vuelo\r\n      });\r\n      //this.animateEnvio(envio);\r\n    });*/\r\n},\r\n\r\nasync iniciarPlanificacion() {\r\ntry {\r\n      // Iniciar la simulación\r\n      const response = await axios.get('http://localhost/api/simulacion/semanal/iniciar');\r\n      console.log(\"Simulación iniciada:\", response.data);\r\n      await this.checkSimulationStatus();\r\n\r\n// Esperar un tiempo antes de obtener los resultados\r\nsetTimeout(async () => {\r\n  await this.fetchSimulationResults();\r\n}, 25000); // Ajusta el tiempo de espera según sea necesario\r\n\r\n    \r\n\r\n    } catch (error) {\r\n      console.error(\"Error iniciando simulación:\", error);\r\n    }\r\n  },\r\n\r\n\r\n  async checkSimulationStatus() {\r\n    try {\r\n      const response = await axios.get('http://localhost/api/simulacion/semanal/estado');\r\n      console.log(\"Estado de la simulación:\", response.data);\r\n      // Manejar la respuesta de estado si es necesario\r\n    } catch (error) {\r\n      console.error(\"Error verificando estado de simulación:\", error);\r\n    }\r\n  },\r\n\r\n  async fetchSimulationResults() {\r\n    try {\r\n      const response = await axios.get('http://localhost/api/simulacion/semanal/resultados');\r\n      console.log(\"Resultados de la simulación:\", response.data);\r\n\r\n      const fetchedVuelos = response.data.calendarioVuelos;\r\n      const fechaInicio = new Date('2024-01-01T00:00:00');\r\n      const fechaFin = new Date(fechaInicio);\r\n      fechaFin.setDate(fechaFin.getDate() + 7);\r\n\r\n      const filteredVuelos = {};\r\n      this.pendingFlights = [];\r\n\r\n      let count = 0;\r\n\r\n      Object.keys(fetchedVuelos).forEach(fecha => {\r\n        if (count >= 20) return;\r\n        const fechaVuelo = new Date(fecha);\r\n        if (fechaVuelo >= fechaInicio && fechaVuelo <= fechaFin) {\r\n          console.log(fechaVuelo+\"  \"+fechaInicio+\"   \"+ fechaFin);\r\n          const vuelosDelDia = fetchedVuelos[fecha];\r\n          filteredVuelos[fecha] = [];\r\n          vuelosDelDia.forEach(vuelo => {\r\n            if (count < 20) {\r\n              vuelo.animated = false; // Agregar propiedad animated\r\n              filteredVuelos[fecha].push(vuelo);\r\n              this.pendingFlights.push(vuelo);\r\n              count++;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      this.calendarioVuelos = filteredVuelos;\r\n      console.log(\"Vuelos disponibles ACTUALIZADOS:\", filteredVuelos);\r\n    } catch (error) {\r\n      console.error(\"Error obteniendo resultados de la simulación:\", error);\r\n    }\r\n  },\r\n\r\n\r\nanimateFlights() {\r\n        console.log(\"Animating Flights with filtered flights:\", JSON.stringify(this.filteredVuelos, null, 2));\r\n        this.filteredVuelos.forEach(vuelo => {\r\n            this.animateFlight(vuelo);\r\n        });\r\n    },\r\n\r\n /*   animateEnvio(envio) {\r\n      let currentFlight = 0;\r\n      const moveNextFlight = () => {\r\n        if (currentFlight < envio.ruta.vuelos.length) {\r\n          this.animateFlight(envio.ruta.vuelos[currentFlight],envio.cantidadPaquetes ,envio.id, () => {\r\n            currentFlight++;\r\n            moveNextFlight();\r\n          });\r\n        }\r\n      };\r\n      moveNextFlight();\r\n    },\r\n\r\n*/\r\n    animateFlight(vuelo ) {\r\n      if ( vuelo.capacidadCargaUsado > vuelo.capacidadCargaMaxima) {\r\n\r\n    this.collapseReason = 'EXCESO DE PAQUETES EN VUELOS';\r\n    console.log(\"Collapse detected!\");\r\n    //this.showCollapseAlert(\"collapseReason\", \"llapseDetails\");\r\n    this.handleCollapse();\r\n    return; //AVISO CON ESTO SE PODRIA PARAR EL MOVIMIENTO\r\n  }\r\n // console.log(`Updating capacities for ${vuelo.ciudadDestino} with ${cantidadPaquetes} packages`);\r\n\r\n  this.updateAirportCapacitiesColapse(vuelo.ciudadDestino, vuelo.cantidadPaquetes);\r\n  console.log(vuelo);\r\n  const sourceId = `vuelo-${vuelo.id}`;\r\n      if (!this.map.getSource(sourceId)) {\r\n        console.log(`Updating source ${sourceId}`);\r\n        this.map.addSource(sourceId, {\r\n          type: 'geojson',\r\n          data: {\r\n            type: 'Feature',\r\n            properties: {\r\n              id: vuelo.id,\r\n          'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\r\n        },\r\n            geometry: {\r\n              type: 'Point',\r\n              coordinates: vuelo.origen\r\n            }\r\n          }\r\n        });\r\n        this.map.addLayer({\r\n          id: `avion-${vuelo.id}`,\r\n          type: 'symbol',\r\n          source: sourceId,\r\n          layout: {\r\n            'icon-image': ['get', 'icon-image'],\r\n            'icon-size': 0.5,\r\n            'icon-allow-overlap': true\r\n          }\r\n        });\r\n \r\n     /*   this.map.on('click', `avion-${envioId}`, (e) => {\r\n          console.log(\"LLega\");\r\n  const vueloId = e.features[0].properties.id; // Obtener el ID del vuelo del evento\r\n  const vuelo = this.envios.find(envio => envio.id === envioId).ruta.vuelos.find(v => v.id === vueloId);\r\n  this.onFlightClick(e, vuelo);\r\n});*/  this.map.on('click', `avion-${vuelo.id}`, (e) => {\r\n  const vueloId = e.features[0].properties.id;\r\n          const clickedVuelo = this.filteredVuelos.find(v => v.id === vueloId);\r\n          this.onFlightClick(e, clickedVuelo);\r\n        });\r\n\r\n      }\r\n      console.log(\"sadas\")\r\n      const flightDurationMinutes = this.parseDurationToMinutes(vuelo.tiempoEstimadoVuelo);\r\n      const flightDurationSimulationSeconds = flightDurationMinutes * 60;\r\n      const realTimeSeconds = flightDurationSimulationSeconds / 360;  // Convert to real time seconds based on 2160 simulated seconds = 1 real second\r\n\r\n // Number of animation steps\r\n\r\n      console.log(flightDurationMinutes)\r\n   //   console.log(realTimePerSimulatedSecond)\r\n   const steps = 100; // Define the total number of steps for smooth animation\r\n  const interval = (realTimeSeconds * 1000) / steps; \r\n      console.log(steps)\r\n   // let steps =336;\r\n    let currentStep = 0;\r\n    let currentPos = [...vuelo.origen];\r\n    const incrementLat = (vuelo.destino[1] - vuelo.origen[1]) / steps;\r\n    const incrementLng = (vuelo.destino[0] - vuelo.origen[0]) / steps;\r\n\r\n    const move = () => {\r\n      if (currentStep <= steps) {\r\n        currentPos[0] += incrementLng;\r\n        currentPos[1] += incrementLat;\r\n        if (this.map.getSource(sourceId)) {\r\n          this.map.getSource(sourceId).setData({\r\n            type: 'Feature',\r\n            geometry: {\r\n              type: 'Point',\r\n              coordinates: currentPos\r\n            },\r\n            properties: {\r\n              id: vuelo.id,\r\n              'icon-image': this.calculateFlightIcon(vuelo.capacidadCargaUsado, vuelo.capacidadCargaMaxima)\r\n            }\r\n          });\r\n        }\r\n        currentStep++;\r\n      //  requestAnimationFrame(move);\r\n      setTimeout(move, interval);\r\n      }\r\n    };\r\n    move();\r\n    },\r\n  \r\n    updateAirportCapacitiesColapse(codigoOACI, paquetes) {\r\n   //   console.log(`Updating capacities for ${codigoOACI} with ${paquetes} packages`);\r\n   this.collapseReason = 'EXCESO DE PAQUETES EN AEROPUERTOS';\r\n    const aeropuerto = aeropuertos.find(a => a.codigoOACI === codigoOACI);\r\n    if (aeropuerto) {\r\n        aeropuerto.capacidadDeAlmacenamientoUsado += paquetes;\r\n        console.log(`New storage used: ${aeropuerto.capacidadDeAlmacenamientoUsado}/${aeropuerto.capacidadAlmacenamientoMaximo}`);\r\n        if (aeropuerto.capacidadDeAlmacenamientoUsado > aeropuerto.capacidadAlmacenamientoMaximo) {\r\n            console.log(\"Airport collapse detected!\");\r\n            const collapseReason = 'Exceso de paquetes';\r\n        const collapseDetails = {\r\n      location: 'Lima, Perú - SMTP',\r\n      packagesInvolved: '956'\r\n    };\r\n    this.showModal();\r\n        }\r\n    }\r\n  },\r\n\r\n    checkForCollapse() {\r\n  console.log(\"Checking for collapse...\");\r\n  if ( aeropuertos.some(aero => aero.capacidadDeAlmacenamientoUsado > aero.capacidadAlmacenamientoMaximo) || \r\n   envios.some(envio => envio.ruta.vuelos.some(vuelo => vuelo.capacidadCargaUsado > vuelo.capacidadCargaMaxima))) {\r\n    console.log(\"Collapse detected!\");\r\n    this.showModal();\r\n  }\r\n},\r\n\r\n\r\n\r\nparseDurationToMinutes(duration) {\r\n    const regex = /PT(\\d+H)?(\\d+M)?/;\r\n    const matches = duration.match(regex);\r\n    const hours = parseInt(matches[1] || 0, 10);\r\n    const minutes = parseInt(matches[2] || 0, 10);\r\n    return (hours * 60) + minutes;\r\n  },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  showModal() {\r\n      this.isModalVisible = true;\r\n      this.isVisible = true;\r\n      this.isVisibleResumen = true;\r\n    },\r\n\r\n    handleCollapse() {\r\n    console.log(\"Collapse detected!\");\r\n    this.isSimulating = false; // Detener la simulación\r\n    this.showModal();\r\n    \r\n  },\r\n  closeCollapseModal() {\r\n    this.isVisible = false;\r\n  },\r\n\r\n   detenerSimulacion(){\r\n     let vue = this;\r\n     vue.toggleIniciarDetener = false;\r\n     vue.toggleReanudar = true;\r\n     \r\n   },\r\n   reanudarSimulacion(){\r\n     let vue = this;\r\n     vue.toggleIniciarDetener = false;\r\n     vue.toggleReanudar = false;\r\n   },\r\n   cancelarSimulacion(){\r\n     let vue = this;\r\n     vue.toggleIniciarDetener = true;\r\n     console.log(\"SE DETIENE LA SIMULACION\");\r\n     clearInterval(vue.myInterval);\r\n     Simulation.stopSimulation();\r\n     console.log(vue.fecha_fin_simulacion);\r\n   },\r\n \r\n   onAirportClick(event) {\r\n      const feature = event.features[0];\r\n      \r\n      const aeropuerto = this.aeropuertos.find(a => a.codigoOACI === feature.properties.codigoOACI);\r\n      console.log(aeropuerto)\r\n      if (aeropuerto) {\r\n        this.openModals.push({\r\n          id: aeropuerto.id,\r\n          data: aeropuerto\r\n        });\r\n      }\r\n    },\r\n    closeAirportModal(id) {\r\n      this.openModals = this.openModals.filter(modal => modal.id !== id);\r\n    },\r\n\r\n    onFlightClick(event, vuelo) {\r\n    console.log(\"Información del vuelo clickeado:\", vuelo);\r\n    if (vuelo) {\r\n      this.openFlightModals.push({\r\n        id: `${vuelo.id}-${new Date().getTime()}`,\r\n        data: vuelo\r\n      });\r\n    }\r\n  },\r\n    closeFlightModal(id) {\r\n      this.openFlightModals = this.openFlightModals.filter(modal => modal.id !== id);\r\n    },\r\n\r\n\r\n\r\n },\r\n computed: {\r\n  /*\r\n  filteredEnvios() {\r\n    const fechaInicio = new Date(this.fecha_inicio_simulacion);\r\n    const fechaFin = new Date(fechaInicio);\r\n    fechaFin.setDate(fechaFin.getDate() + 7);\r\n\r\n    const filtered = this.envios.filter(envio => {\r\n      return envio.ruta.vuelos.some(vuelo => {\r\n        const fechaSalida = new Date(`${vuelo.fechaSalida}T${vuelo.horaSalida}`);\r\n        const fechaLlegada = new Date(`${vuelo.fechaLlegada}T${vuelo.horaLlegada}`);\r\n\r\n        return fechaSalida >= fechaInicio && fechaLlegada <= fechaFin;\r\n      });\r\n    });\r\n\r\n  \r\n    return filtered;\r\n  },*/\r\n  filteredVuelos() {\r\n    const filtered = [];\r\n    \r\n    Object.keys(this.calendarioVuelos).forEach(fecha => {\r\n      const vuelosDelDia = this.calendarioVuelos[fecha];\r\n      vuelosDelDia.forEach(vuelo => {\r\n        filtered.push(vuelo);\r\n      });\r\n    });\r\n\r\n    return filtered;\r\n  }\r\n}\r\n\r\n}\r\n</script>\r\n<style scoped>\r\n.datetime-display {\r\n position: absolute;\r\n top: 10px;\r\n right: 10px;\r\n color: white;\r\n background-color: rgba(0, 0, 0, 0.7);\r\n padding: 5px 10px;\r\n border-radius: 5px;\r\n z-index: 1001; /* Asegúrate de que esté visible sobre el mapa */\r\n}\r\n\r\n.map-container {\r\n position: relative;\r\n height: 100vh;\r\n width: 100%;\r\n \r\n}\r\n\r\n.map-header {\r\n position: absolute;\r\n top: 0;\r\n left: 0;\r\n z-index: 1000;\r\n width: 100%;\r\n background-color: rgba(0, 0, 0, 0.5);\r\n padding: 10px;\r\n color: #fff;\r\n text-align: center;\r\n}\r\n\r\n.map-title {\r\n font-size: 1.5em;\r\n}\r\n\r\n.map-tagline {\r\n font-size: 1em;\r\n}\r\n\r\n.map-search-container {\r\n .map-search-container {\r\n position: absolute;\r\n top: 60px;\r\n left: 10px; /* Ajusta según necesidad */\r\n z-index: 1000;\r\n width: 200px; /* Ancho fijo para todos los inputs */\r\n padding: 10px;\r\n background-color: rgba(0, 0, 0, 0.5);\r\n display: flex;\r\n flex-direction: column; /* Cambio aquí */\r\n align-items: flex-start; /* Alinear al inicio (izquierda) */\r\n}\r\n}\r\n\r\n.search-input {\r\n flex: 1;\r\n margin: 0 5px;\r\n padding: 10px;\r\n border: none;\r\n border-radius: 5px;\r\n}\r\n\r\n.main-map {\r\n height: 100%;\r\n width: 100%;\r\n}\r\n\r\n.map-sidebar {\r\n position: absolute;\r\n top: 0;\r\n right: 0;\r\n z-index: 1000;\r\n height: 100%;\r\n width: 300px;\r\n background-color: rgba(0, 0, 0, 0.5);\r\n color: #fff;\r\n padding: 10px;\r\n display: flex;\r\n flex-direction: column;\r\n}\r\n\r\n\r\n.brand-title {\r\n font-size: 1em; /* Ajusta el tamaño como desees */\r\n color: #fff; /* Color para 'Redex' */\r\n font-weight: bold;\r\n}\r\n\r\n.brand-title-point {\r\n font-size: 1em; /* Asegúrate de que sea del mismo tamaño que .brand-title para alineación adecuada */\r\n color: #00B074; /* Color para el punto */\r\n font-weight: bold;\r\n}\r\n\r\n.brand-tagline {\r\n font-size: 1em; /* Ajusta el tamaño del tagline */\r\n color: #B9BBBD; /* Color para 'Always on Time' */\r\n font-weight: bold;\r\n margin-bottom: 199px;\r\n display: flex;\r\n align-items: baseline; /* Alinea correctamente el texto y el punto */\r\n gap: 0.2em; /* Ajusta el espacio entre 'Redex' y el punto */\r\n}\r\n\r\n/* Si deseas que 'Redex.' esté en una sola línea, puedes usar display: flex en el contenedor */\r\n.brand {\r\n display: flex;\r\n align-items: baseline; /* Alinea correctamente el texto y el punto */\r\n gap: 0.2em; /* Ajusta el espacio entre 'Redex' y el punto */\r\n \r\n margin-bottom: -5px; /* Ajusta esto para aumentar el espacio entre el título y el subtítulo */\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n.map-legend {\r\n color: black; /* Cambia el color de texto a negro */\r\n position: absolute;\r\n bottom: 120px;\r\n right: 20px;\r\n z-index: 1000;\r\n background: #fff;\r\n padding: 10px;\r\n border-radius: 5px;\r\n box-shadow: 0 2px 4px rgba(0,0,0,0.3);\r\n cursor: pointer;\r\n}\r\n\r\n.legend-toggle {\r\n background: #333;\r\n color: #fff;\r\n padding: 5px 10px;\r\n border: none;\r\n border-radius: 3px;\r\n cursor: pointer;\r\n display: block;\r\n width: 100%;\r\n text-align: center;\r\n}\r\n\r\n.legend-content {\r\n color: black;\r\n list-style: none;\r\n padding: 0;\r\n margin: 0; /* Remove margin-top when visible */\r\n display: none; /* Hidden by default */\r\n}\r\n\r\n.legend-content li {\r\n color: black; \r\n margin-bottom: 5px;\r\n display: flex;\r\n align-items: center;\r\n}\r\n\r\n.dot {\r\n\r\n height: 10px;\r\n width: 10px;\r\n border-radius: 50%;\r\n display: inline-block;\r\n margin-right: 10px;\r\n}\r\n\r\n.less-50 { background: red; }\r\n.between-50-80 { background: orange; }\r\n.greater-80 { background: green; }\r\n\r\n.icon {\r\n width: 16px;\r\n height: 16px;\r\n display: inline-block;\r\n background-size: contain;\r\n background-repeat: no-repeat;\r\n margin-right: 10px;\r\n}\r\n\r\n.modal-content {\r\n  background: white; /* Fondo blanco para alto contraste */\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0 4px 6px rgba(0,0,0,0.1);\r\n  color: black; /* Color de texto general a negro */\r\n  width: auto;\r\n  max-width: 500px; /* Ajusta el ancho máximo según necesites */\r\n  text-align: left; /* Asegura que el texto esté alineado a la izquierda */\r\n}\r\n\r\n.modal-content h2 {\r\n  color: red; /* Color rojo para el título del colapso */\r\n  font-weight: bold;\r\n  margin: 0 auto; /* Centra la imagen */\r\n}\r\n\r\n.modal-content strong {\r\n  color: red; /* Color rojo para las palabras clave */\r\n  font-weight: bold;\r\n}\r\n\r\n.modal-content p, .modal-content ul {\r\n  color: black; /* Resto del texto en negro */\r\n}\r\n\r\n.modal-button {\r\n  background-color: red; /* Fondo rojo para el botón */\r\n  color: white; /* Texto blanco para el botón */\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  margin-top: 10px; /* Espaciado superior para separarlo del contenido */\r\n  font-weight: bold;\r\n}\r\n\r\n.modal-button:hover {\r\n  background-color: darkred; /* Un rojo más oscuro al pasar el mouse */\r\n}\r\n.modal-content li strong {\r\n  color: black; /* Cambia el color de los términos clave a negro */\r\n  font-weight: normal; /* Si deseas que no sean bold */\r\n}\r\n\r\n.modal-content li {\r\n  color: black; /* Todos los textos de los items en negro */\r\n}\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 10000; /* Alto z-index para asegurar que está sobre otros elementos */\r\n}\r\n\r\n.collapse-icon {\r\n  background-image: url('/img/carita.png');\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  width: 50px; /* Ajusta el tamaño según tus necesidades */\r\n  height: 50px; /* Ajusta el tamaño según tus necesidades */\r\n  display: block;\r\n  margin: 0 auto; /* Centra la imagen */\r\n}\r\n\r\n\r\n\r\n\r\n\r\n.modal-content-airport {\r\n  background: white; /* Fondo blanco para alto contraste */\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0 4px 6px rgba(0,0,0,0.1);\r\n  color: black; /* Color de texto general a negro */\r\n  width: auto;\r\n  max-width: 500px; /* Ajusta el ancho máximo según necesites */\r\n  text-align: left; /* Asegura que el texto esté alineado a la izquierda */\r\n  display: flex;\r\n  flex-direction: column; /* Alinea el contenido verticalmente */\r\n  align-items: left; /* Centra horizontalmente el contenido */\r\n}\r\n\r\n.modal-content-airport h2 {\r\n  color: #00B074; /* Color verde para el título del colapso */\r\n  font-weight: bold;\r\n  margin: 0 auto; /* Centra la imagen */\r\n}\r\n\r\n.modal-content-airport strong {\r\n  color: #00B074; /* Color verde para las palabras clave */\r\n  font-weight: bold;\r\n}\r\n\r\n.modal-content-airport p, .modal-content-airport ul {\r\n  color: black; /* Resto del texto en negro */\r\n}\r\n\r\n.modal-button-airport {\r\n  background-color: #00B074; /* Fondo verde para el botón */\r\n  color: white; /* Texto blanco para el botón */\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  margin-top: 10px; /* Espaciado superior para separarlo del contenido */\r\n  font-weight: bold;\r\n  align-self: center; /* Centra el botón horizontalmente */\r\n}\r\n\r\n.modal-button-airport:hover {\r\n  background-color: darkgreen; /* Un verde más oscuro al pasar el mouse */\r\n}\r\n\r\n.modal-content-airport li strong {\r\n  color: black; /* Cambia el color de los términos clave a negro */\r\n  font-weight: normal; /* Si deseas que no sean bold */\r\n}\r\n\r\n.modal-content-airport li {\r\n  color: black; /* Todos los textos de los items en negro */\r\n}\r\n\r\n.modal-overlay-airport {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 10000; /* Alto z-index para asegurar que está sobre otros elementos */\r\n}\r\n\r\n\r\n\r\n.modal-content-flight {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: 0 4px 6px rgba(0,0,0,0.1);\r\n  color: black;\r\n  width: auto;\r\n  max-width: 500px;\r\n  text-align: left;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: left;\r\n}\r\n\r\n.modal-content-flight h2 {\r\n  color: #00B074;\r\n  font-weight: bold;\r\n  margin: 0 auto;\r\n}\r\n\r\n.modal-content-flight strong {\r\n  color: #00B074;\r\n  font-weight: bold;\r\n}\r\n\r\n.modal-content-flight p, .modal-content-flight ul {\r\n  color: black;\r\n}\r\n\r\n.modal-button-flight {\r\n  background-color: #00B074;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n  font-weight: bold;\r\n  align-self: center;\r\n}\r\n\r\n.modal-button-flight:hover {\r\n  background-color: darkgreen;\r\n}\r\n\r\n.modal-overlay-flight {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 10000;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n.airplane-icon { background-image: url('/img/avion.png'); }\r\n.airport-icon { background-image: url('/img/ubi.png'); }\r\n.airport-green { background-image: url('/img/airport-green.png'); }\r\n.airport-orange { background-image: url('/img/airport-orange.png'); }\r\n.airport-red { background-image: url('/img/airport-red.png'); }\r\n.flight-green { background-image: url('/img/flight-green.png'); }\r\n.flight-orange { background-image: url('/img/flight-orange.png'); }\r\n.flight-red { background-image: url('/img/flight-red.png'); }\r\n\r\n</style>"],"sourceRoot":"src/pages"}]}