{"remainingRequest":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-mapbox\\src\\components\\UI\\Marker.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-mapbox\\src\\components\\UI\\Marker.vue","mtime":1715192477961},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\babel-loader\\lib\\index.js","mtime":1715192467870},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js","mtime":1715192477908}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport withEvents from \"../../lib/withEvents\";\r\nimport withSelfEvents from \"./withSelfEvents\";\r\n\r\nconst markerEvents = {\r\n  drag: \"drag\",\r\n  dragstart: \"dragstart\",\r\n  dragend: \"dragend\"\r\n};\r\n\r\nconst markerDOMEvents = {\r\n  click: \"click\",\r\n  mouseenter: \"mouseenter\",\r\n  mouseleave: \"mouseleave\"\r\n};\r\n\r\nexport default {\r\n  name: \"MapMarker\",\r\n  mixins: [withEvents, withSelfEvents],\r\n\r\n  inject: [\"mapbox\", \"map\"],\r\n\r\n  provide() {\r\n    const self = this;\r\n    return {\r\n      get marker() {\r\n        return self.marker;\r\n      }\r\n    };\r\n  },\r\n\r\n  props: {\r\n    // mapbox marker options\r\n    offset: {\r\n      type: [Object, Array],\r\n      default: () => [0, 0]\r\n    },\r\n    coordinates: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    color: {\r\n      type: String\r\n    },\r\n    anchor: {\r\n      type: String,\r\n      default: \"center\"\r\n    },\r\n    draggable: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      initial: true,\r\n      marker: undefined\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    coordinates(lngLat) {\r\n      if (this.initial) return;\r\n      this.marker.setLngLat(lngLat);\r\n    },\r\n    draggable(next) {\r\n      if (this.initial) return;\r\n      this.marker.setDraggable(next);\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    const markerOptions = {\r\n      ...this.$props\r\n    };\r\n    if (this.$slots.marker) {\r\n      markerOptions.element = this.$slots.marker[0].elm;\r\n    }\r\n    this.marker = new this.mapbox.Marker(markerOptions);\r\n\r\n    if (this.$listeners[\"update:coordinates\"]) {\r\n      this.marker.on(\"dragend\", event => {\r\n        let newCoordinates;\r\n        if (this.coordinates instanceof Array) {\r\n          newCoordinates = [event.target._lngLat.lng, event.target._lngLat.lat];\r\n        } else {\r\n          newCoordinates = event.target._lngLat;\r\n        }\r\n        this.$emit(\"update:coordinates\", newCoordinates);\r\n      });\r\n    }\r\n\r\n    const eventNames = Object.keys(markerEvents);\r\n    this.$_bindSelfEvents(eventNames, this.marker);\r\n\r\n    this.initial = false;\r\n    this.$_addMarker();\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.map !== undefined && this.marker !== undefined) {\r\n      this.marker.remove();\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    $_addMarker() {\r\n      this.marker.setLngLat(this.coordinates).addTo(this.map);\r\n      this.$_bindMarkerDOMEvents();\r\n      this.$_emitEvent(\"added\", { marker: this.marker });\r\n    },\r\n\r\n    $_emitSelfEvent(event) {\r\n      this.$_emitMapEvent(event, { marker: this.marker });\r\n    },\r\n\r\n    $_bindMarkerDOMEvents() {\r\n      Object.keys(this.$listeners).forEach(key => {\r\n        if (Object.values(markerDOMEvents).includes(key)) {\r\n          this.marker._element.addEventListener(key, event => {\r\n            this.$_emitSelfEvent(event);\r\n          });\r\n        }\r\n      });\r\n    },\r\n\r\n    remove() {\r\n      this.marker.remove();\r\n      this.$_emitEvent(\"removed\");\r\n    },\r\n\r\n    togglePopup() {\r\n      return this.marker.togglePopup();\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["Marker.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Marker.vue","sourceRoot":"node_modules/vue-mapbox/src/components/UI","sourcesContent":["<template>\r\n  <div style=\"display: none\">\r\n    <!-- slot for custom marker -->\r\n    <slot name=\"marker\" />\r\n    <!-- slot for popup -->\r\n    <slot v-if=\"marker\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport withEvents from \"../../lib/withEvents\";\r\nimport withSelfEvents from \"./withSelfEvents\";\r\n\r\nconst markerEvents = {\r\n  drag: \"drag\",\r\n  dragstart: \"dragstart\",\r\n  dragend: \"dragend\"\r\n};\r\n\r\nconst markerDOMEvents = {\r\n  click: \"click\",\r\n  mouseenter: \"mouseenter\",\r\n  mouseleave: \"mouseleave\"\r\n};\r\n\r\nexport default {\r\n  name: \"MapMarker\",\r\n  mixins: [withEvents, withSelfEvents],\r\n\r\n  inject: [\"mapbox\", \"map\"],\r\n\r\n  provide() {\r\n    const self = this;\r\n    return {\r\n      get marker() {\r\n        return self.marker;\r\n      }\r\n    };\r\n  },\r\n\r\n  props: {\r\n    // mapbox marker options\r\n    offset: {\r\n      type: [Object, Array],\r\n      default: () => [0, 0]\r\n    },\r\n    coordinates: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    color: {\r\n      type: String\r\n    },\r\n    anchor: {\r\n      type: String,\r\n      default: \"center\"\r\n    },\r\n    draggable: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      initial: true,\r\n      marker: undefined\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    coordinates(lngLat) {\r\n      if (this.initial) return;\r\n      this.marker.setLngLat(lngLat);\r\n    },\r\n    draggable(next) {\r\n      if (this.initial) return;\r\n      this.marker.setDraggable(next);\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    const markerOptions = {\r\n      ...this.$props\r\n    };\r\n    if (this.$slots.marker) {\r\n      markerOptions.element = this.$slots.marker[0].elm;\r\n    }\r\n    this.marker = new this.mapbox.Marker(markerOptions);\r\n\r\n    if (this.$listeners[\"update:coordinates\"]) {\r\n      this.marker.on(\"dragend\", event => {\r\n        let newCoordinates;\r\n        if (this.coordinates instanceof Array) {\r\n          newCoordinates = [event.target._lngLat.lng, event.target._lngLat.lat];\r\n        } else {\r\n          newCoordinates = event.target._lngLat;\r\n        }\r\n        this.$emit(\"update:coordinates\", newCoordinates);\r\n      });\r\n    }\r\n\r\n    const eventNames = Object.keys(markerEvents);\r\n    this.$_bindSelfEvents(eventNames, this.marker);\r\n\r\n    this.initial = false;\r\n    this.$_addMarker();\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.map !== undefined && this.marker !== undefined) {\r\n      this.marker.remove();\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    $_addMarker() {\r\n      this.marker.setLngLat(this.coordinates).addTo(this.map);\r\n      this.$_bindMarkerDOMEvents();\r\n      this.$_emitEvent(\"added\", { marker: this.marker });\r\n    },\r\n\r\n    $_emitSelfEvent(event) {\r\n      this.$_emitMapEvent(event, { marker: this.marker });\r\n    },\r\n\r\n    $_bindMarkerDOMEvents() {\r\n      Object.keys(this.$listeners).forEach(key => {\r\n        if (Object.values(markerDOMEvents).includes(key)) {\r\n          this.marker._element.addEventListener(key, event => {\r\n            this.$_emitSelfEvent(event);\r\n          });\r\n        }\r\n      });\r\n    },\r\n\r\n    remove() {\r\n      this.marker.remove();\r\n      this.$_emitEvent(\"removed\");\r\n    },\r\n\r\n    togglePopup() {\r\n      return this.marker.togglePopup();\r\n    }\r\n  }\r\n};\r\n</script>\r\n"]}]}