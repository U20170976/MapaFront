{"remainingRequest":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\src\\components\\Navbar\\Navbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\src\\components\\Navbar\\Navbar.vue","mtime":1715192479073},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\babel-loader\\lib\\index.js","mtime":1715192467870},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js","mtime":1715192477908}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { CollapseTransition } from 'vue2-transitions';\r\nimport NavbarToggleButton from './NavbarToggleButton';\r\nlet resizeTimeout;\r\nfunction resizeThrottler(actualResizeHandler) {\r\n  // ignore resize events as long as an actualResizeHandler execution is in the queue\r\n  if (!resizeTimeout) {\r\n    resizeTimeout = setTimeout(() => {\r\n      resizeTimeout = null;\r\n      actualResizeHandler();\r\n\r\n      // The actualResizeHandler will execute at a rate of 15fps\r\n    }, 66);\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: 'navbar',\r\n  props: {\r\n    transparent: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    position: {\r\n      type: String,\r\n      default: 'relative'\r\n    },\r\n    menuClasses: {\r\n      type: [String, Object, Array]\r\n    },\r\n    colorOnScroll: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: 'white',\r\n      validator(value) {\r\n        return [\r\n          'white',\r\n          'default',\r\n          'primary',\r\n          'danger',\r\n          'success',\r\n          'warning',\r\n          'info'\r\n        ].includes(value);\r\n      }\r\n    },\r\n    navMenuClasses: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    menuImage: {\r\n      type: String\r\n    },\r\n    expand: {\r\n      type: [String, Boolean],\r\n      default: 'lg'\r\n    }\r\n  },\r\n  provide() {\r\n    return {\r\n      closeNavbar: this.close\r\n    };\r\n  },\r\n  components: {\r\n    CollapseTransition,\r\n    NavbarToggleButton\r\n  },\r\n  data() {\r\n    return {\r\n      showMenu: false,\r\n      extraNavClasses: '',\r\n      currentScrollValue: 0\r\n    };\r\n  },\r\n  computed: {\r\n    slotData() {\r\n      return {\r\n        toggle: this.toggle,\r\n        open: this.open,\r\n        close: this.close,\r\n        isToggled: this.showMenu\r\n      };\r\n    },\r\n    classes() {\r\n      let color = `bg-${this.type}`;\r\n      let navPosition = `navbar-${this.position}`;\r\n      let colorOnScrollTransparent =\r\n        this.colorOnScroll && this.currentScrollValue < this.colorOnScroll;\r\n\r\n      if (this.position === 'fixed') {\r\n        navPosition = 'fixed-top';\r\n      }\r\n\r\n      return [\r\n        { 'navbar-transparent': this.transparent || colorOnScrollTransparent },\r\n        { [color]: !this.transparent && this.colorOnScroll === 0 },\r\n        this.expand ? `navbar-expand-${this.expand}` : '',\r\n        navPosition,\r\n        this.extraNavClasses\r\n      ];\r\n    }\r\n  },\r\n  methods: {\r\n    setNav(value) {\r\n      let htmlClasses = document.querySelector('html').classList;\r\n      if (value) {\r\n        htmlClasses.add('nav-open');\r\n      } else {\r\n        htmlClasses.remove('nav-open');\r\n      }\r\n      let isOpen = htmlClasses.contains('nav-open');\r\n      let eventToTrigger = isOpen ? 'open' : 'close';\r\n      this.showMenu = isOpen;\r\n      this.$emit(eventToTrigger);\r\n    },\r\n    toggle() {\r\n      this.setNav(!this.showMenu);\r\n    },\r\n    open() {\r\n      this.setNav(true);\r\n    },\r\n    close() {\r\n      if (this.showMenu) {\r\n        this.setNav(false);\r\n      }\r\n    },\r\n    handleScroll() {\r\n      let scrollValue =\r\n        document.body.scrollTop || document.documentElement.scrollTop;\r\n      this.currentScrollValue = scrollValue;\r\n      if (this.colorOnScroll > 0 && scrollValue > this.colorOnScroll) {\r\n        this.extraNavClasses = `bg-${this.type}`;\r\n      } else {\r\n        if (this.extraNavClasses) {\r\n          this.extraNavClasses = '';\r\n        }\r\n      }\r\n    },\r\n    scrollListener() {\r\n      resizeThrottler(this.handleScroll);\r\n    }\r\n  },\r\n  mounted() {\r\n    document.addEventListener('scroll', this.scrollListener);\r\n  },\r\n  beforeDestroy() {\r\n    document.removeEventListener('scroll', this.scrollListener);\r\n  }\r\n};\r\n",{"version":3,"sources":["Navbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"Navbar.vue","sourceRoot":"src/components/Navbar","sourcesContent":["<template>\r\n  <nav :class=\"classes\" class=\"navbar\">\r\n    <div class=\"container\">\r\n      <div class=\"navbar-translate\">\r\n        <slot v-bind=\"slotData\"></slot>\r\n        <navbar-toggle-button\r\n          :toggled=\"showMenu\"\r\n          @click.native.stop=\"toggle\"\r\n        ></navbar-toggle-button>\r\n      </div>\r\n      <div\r\n        class=\"navbar-collapse collapse\"\r\n        v-click-outside=\"close\"\r\n        :style=\"menuImage ? `background: url(${menuImage}) 0% 0% / cover;` : ''\"\r\n        :class=\"[\r\n          { show: showMenu },\r\n          { 'has-image': menuImage },\r\n          navMenuClasses\r\n        ]\"\r\n        v-if=\"$slots['navbar-menu'] || $scopedSlots['navbar-menu']\"\r\n        data-color=\"orange\"\r\n        id=\"navigation\"\r\n      >\r\n        <slot name=\"before-menu\"></slot>\r\n        <ul class=\"navbar-nav\" :class=\"menuClasses\">\r\n          <slot name=\"navbar-menu\" v-bind=\"slotData\"></slot>\r\n        </ul>\r\n        <slot name=\"after-menu\"></slot>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n</template>\r\n<script>\r\nimport { CollapseTransition } from 'vue2-transitions';\r\nimport NavbarToggleButton from './NavbarToggleButton';\r\nlet resizeTimeout;\r\nfunction resizeThrottler(actualResizeHandler) {\r\n  // ignore resize events as long as an actualResizeHandler execution is in the queue\r\n  if (!resizeTimeout) {\r\n    resizeTimeout = setTimeout(() => {\r\n      resizeTimeout = null;\r\n      actualResizeHandler();\r\n\r\n      // The actualResizeHandler will execute at a rate of 15fps\r\n    }, 66);\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: 'navbar',\r\n  props: {\r\n    transparent: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    position: {\r\n      type: String,\r\n      default: 'relative'\r\n    },\r\n    menuClasses: {\r\n      type: [String, Object, Array]\r\n    },\r\n    colorOnScroll: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: 'white',\r\n      validator(value) {\r\n        return [\r\n          'white',\r\n          'default',\r\n          'primary',\r\n          'danger',\r\n          'success',\r\n          'warning',\r\n          'info'\r\n        ].includes(value);\r\n      }\r\n    },\r\n    navMenuClasses: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    menuImage: {\r\n      type: String\r\n    },\r\n    expand: {\r\n      type: [String, Boolean],\r\n      default: 'lg'\r\n    }\r\n  },\r\n  provide() {\r\n    return {\r\n      closeNavbar: this.close\r\n    };\r\n  },\r\n  components: {\r\n    CollapseTransition,\r\n    NavbarToggleButton\r\n  },\r\n  data() {\r\n    return {\r\n      showMenu: false,\r\n      extraNavClasses: '',\r\n      currentScrollValue: 0\r\n    };\r\n  },\r\n  computed: {\r\n    slotData() {\r\n      return {\r\n        toggle: this.toggle,\r\n        open: this.open,\r\n        close: this.close,\r\n        isToggled: this.showMenu\r\n      };\r\n    },\r\n    classes() {\r\n      let color = `bg-${this.type}`;\r\n      let navPosition = `navbar-${this.position}`;\r\n      let colorOnScrollTransparent =\r\n        this.colorOnScroll && this.currentScrollValue < this.colorOnScroll;\r\n\r\n      if (this.position === 'fixed') {\r\n        navPosition = 'fixed-top';\r\n      }\r\n\r\n      return [\r\n        { 'navbar-transparent': this.transparent || colorOnScrollTransparent },\r\n        { [color]: !this.transparent && this.colorOnScroll === 0 },\r\n        this.expand ? `navbar-expand-${this.expand}` : '',\r\n        navPosition,\r\n        this.extraNavClasses\r\n      ];\r\n    }\r\n  },\r\n  methods: {\r\n    setNav(value) {\r\n      let htmlClasses = document.querySelector('html').classList;\r\n      if (value) {\r\n        htmlClasses.add('nav-open');\r\n      } else {\r\n        htmlClasses.remove('nav-open');\r\n      }\r\n      let isOpen = htmlClasses.contains('nav-open');\r\n      let eventToTrigger = isOpen ? 'open' : 'close';\r\n      this.showMenu = isOpen;\r\n      this.$emit(eventToTrigger);\r\n    },\r\n    toggle() {\r\n      this.setNav(!this.showMenu);\r\n    },\r\n    open() {\r\n      this.setNav(true);\r\n    },\r\n    close() {\r\n      if (this.showMenu) {\r\n        this.setNav(false);\r\n      }\r\n    },\r\n    handleScroll() {\r\n      let scrollValue =\r\n        document.body.scrollTop || document.documentElement.scrollTop;\r\n      this.currentScrollValue = scrollValue;\r\n      if (this.colorOnScroll > 0 && scrollValue > this.colorOnScroll) {\r\n        this.extraNavClasses = `bg-${this.type}`;\r\n      } else {\r\n        if (this.extraNavClasses) {\r\n          this.extraNavClasses = '';\r\n        }\r\n      }\r\n    },\r\n    scrollListener() {\r\n      resizeThrottler(this.handleScroll);\r\n    }\r\n  },\r\n  mounted() {\r\n    document.addEventListener('scroll', this.scrollListener);\r\n  },\r\n  beforeDestroy() {\r\n    document.removeEventListener('scroll', this.scrollListener);\r\n  }\r\n};\r\n</script>\r\n<style></style>\r\n"]}]}