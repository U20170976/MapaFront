{"remainingRequest":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-mapbox\\src\\components\\UI\\Popup.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-mapbox\\src\\components\\UI\\Popup.vue","mtime":1715192477962},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\babel-loader\\lib\\index.js","mtime":1715192467870},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1715192468895},{"path":"C:\\Users\\PC\\Desktop\\Otros\\DP1\\Front\\dp1_front-Redex\\Redex\\node_modules\\vue-loader\\lib\\index.js","mtime":1715192477908}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\r\nimport withEvents from \"../../lib/withEvents\";\r\nimport withSelfEvents from \"./withSelfEvents\";\r\n\r\nconst popupEvents = {\r\n  open: \"open\",\r\n  close: \"close\"\r\n};\r\n\r\n/**\r\n * Popup component.\r\n * @see See [Mapbox Gl JS Popup](https://www.mapbox.com/mapbox-gl-js/api/#popup)\r\n */\r\nexport default {\r\n  name: \"Popup\",\r\n  mixins: [withEvents, withSelfEvents],\r\n\r\n  inject: {\r\n    mapbox: {\r\n      default: null\r\n    },\r\n    map: {\r\n      default: null\r\n    },\r\n    marker: {\r\n      default: null\r\n    }\r\n  },\r\n\r\n  props: {\r\n    /**\r\n     * If `true`, a close button will appear in the top right corner of the popup.\r\n     * Mapbox GL popup option.\r\n     */\r\n    closeButton: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    /**\r\n     * Mapbox GL popup option.\r\n     * If `true`, the popup will closed when the map is clicked. .\r\n     */\r\n    closeOnClick: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    /**\r\n     * Mapbox GL popup option.\r\n     * A string indicating the popup's location relative to the coordinate set.\r\n     * If unset the anchor will be dynamically set to ensure the popup falls within the map container with a preference for 'bottom' .\r\n     *  'top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right'\r\n     */\r\n    anchor: {\r\n      validator(value) {\r\n        let allowedValues = [\r\n          \"top\",\r\n          \"bottom\",\r\n          \"left\",\r\n          \"right\",\r\n          \"top-left\",\r\n          \"top-right\",\r\n          \"bottom-left\",\r\n          \"bottom-right\"\r\n        ];\r\n        return typeof value === \"string\" && allowedValues.includes(value);\r\n      },\r\n      default: undefined\r\n    },\r\n    /**\r\n     * Mapbox GL popup option.\r\n     * A pixel offset applied to the popup's location\r\n     * a single number specifying a distance from the popup's location\r\n     * a PointLike specifying a constant offset\r\n     * an object of Points specifing an offset for each anchor position Negative offsets indicate left and up.\r\n     */\r\n    offset: {\r\n      type: [Number, Object, Array],\r\n      default: () => [0, 0]\r\n    },\r\n    coordinates: {\r\n      type: Array\r\n    },\r\n\r\n    /**\r\n     * Component option.\r\n     * If `true`, popup treats data in deafult slot as plain text\r\n     */\r\n    onlyText: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n\r\n    showed: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      initial: true,\r\n      popup: undefined\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    open: {\r\n      get() {\r\n        if (this.popup !== undefined) {\r\n          return this.popup.isOpen();\r\n        }\r\n        return false;\r\n      },\r\n      set(value) {\r\n        if (this.map && this.popup) {\r\n          if (value) {\r\n            this.popup.remove();\r\n          } else {\r\n            this.popup.addTo(this.map);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    coordinates(lngLat) {\r\n      if (this.initial) return;\r\n      this.popup.setLngLat(lngLat);\r\n    },\r\n\r\n    showed(next, prev) {\r\n      if (next !== prev) {\r\n        this.open = next;\r\n        if (this.marker) {\r\n          this.marker.togglePopup();\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.popup = new this.mapbox.Popup(this.$props);\r\n  },\r\n\r\n  mounted() {\r\n    this.$_addPopup();\r\n    this.initial = false;\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.map) {\r\n      this.popup.remove();\r\n      this.$_emitEvent(\"removed\");\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    $_addPopup() {\r\n      this.popup = new this.mapbox.Popup(this.$props);\r\n      if (this.coordinates !== undefined) {\r\n        this.popup.setLngLat(this.coordinates);\r\n      }\r\n      if (this.$slots.default !== undefined) {\r\n        if (this.onlyText) {\r\n          if (this.$slots.default[0].elm.nodeType === 3) {\r\n            let tmpEl = document.createElement(\"span\");\r\n            tmpEl.appendChild(this.$slots.default[0].elm);\r\n            this.popup.setText(tmpEl.innerText);\r\n          } else {\r\n            this.popup.setText(this.$slots.default[0].elm.innerText);\r\n          }\r\n        } else {\r\n          this.popup.setDOMContent(this.$slots.default[0].elm);\r\n        }\r\n      }\r\n\r\n      this.$_bindSelfEvents(Object.keys(popupEvents), this.popup);\r\n\r\n      this.$_emitEvent(\"added\", { popup: this.popup });\r\n\r\n      if (this.marker) {\r\n        this.marker.setPopup(this.popup);\r\n      }\r\n      if (this.showed) {\r\n        this.open = true;\r\n\r\n        if (this.marker) {\r\n          this.marker.togglePopup();\r\n        }\r\n      }\r\n    },\r\n\r\n    $_emitSelfEvent(event) {\r\n      this.$_emitMapEvent(event, { popup: this.popup });\r\n    },\r\n\r\n    remove() {\r\n      this.popup.remove();\r\n      this.$_emitEvent(\"remove\", { popup: this.popup });\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["Popup.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Popup.vue","sourceRoot":"node_modules/vue-mapbox/src/components/UI","sourcesContent":["<template>\r\n  <div style=\"display: none\">\r\n    <!-- @slot Slot for popup content -->\r\n    <slot />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport withEvents from \"../../lib/withEvents\";\r\nimport withSelfEvents from \"./withSelfEvents\";\r\n\r\nconst popupEvents = {\r\n  open: \"open\",\r\n  close: \"close\"\r\n};\r\n\r\n/**\r\n * Popup component.\r\n * @see See [Mapbox Gl JS Popup](https://www.mapbox.com/mapbox-gl-js/api/#popup)\r\n */\r\nexport default {\r\n  name: \"Popup\",\r\n  mixins: [withEvents, withSelfEvents],\r\n\r\n  inject: {\r\n    mapbox: {\r\n      default: null\r\n    },\r\n    map: {\r\n      default: null\r\n    },\r\n    marker: {\r\n      default: null\r\n    }\r\n  },\r\n\r\n  props: {\r\n    /**\r\n     * If `true`, a close button will appear in the top right corner of the popup.\r\n     * Mapbox GL popup option.\r\n     */\r\n    closeButton: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    /**\r\n     * Mapbox GL popup option.\r\n     * If `true`, the popup will closed when the map is clicked. .\r\n     */\r\n    closeOnClick: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    /**\r\n     * Mapbox GL popup option.\r\n     * A string indicating the popup's location relative to the coordinate set.\r\n     * If unset the anchor will be dynamically set to ensure the popup falls within the map container with a preference for 'bottom' .\r\n     *  'top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right'\r\n     */\r\n    anchor: {\r\n      validator(value) {\r\n        let allowedValues = [\r\n          \"top\",\r\n          \"bottom\",\r\n          \"left\",\r\n          \"right\",\r\n          \"top-left\",\r\n          \"top-right\",\r\n          \"bottom-left\",\r\n          \"bottom-right\"\r\n        ];\r\n        return typeof value === \"string\" && allowedValues.includes(value);\r\n      },\r\n      default: undefined\r\n    },\r\n    /**\r\n     * Mapbox GL popup option.\r\n     * A pixel offset applied to the popup's location\r\n     * a single number specifying a distance from the popup's location\r\n     * a PointLike specifying a constant offset\r\n     * an object of Points specifing an offset for each anchor position Negative offsets indicate left and up.\r\n     */\r\n    offset: {\r\n      type: [Number, Object, Array],\r\n      default: () => [0, 0]\r\n    },\r\n    coordinates: {\r\n      type: Array\r\n    },\r\n\r\n    /**\r\n     * Component option.\r\n     * If `true`, popup treats data in deafult slot as plain text\r\n     */\r\n    onlyText: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n\r\n    showed: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      initial: true,\r\n      popup: undefined\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    open: {\r\n      get() {\r\n        if (this.popup !== undefined) {\r\n          return this.popup.isOpen();\r\n        }\r\n        return false;\r\n      },\r\n      set(value) {\r\n        if (this.map && this.popup) {\r\n          if (value) {\r\n            this.popup.remove();\r\n          } else {\r\n            this.popup.addTo(this.map);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    coordinates(lngLat) {\r\n      if (this.initial) return;\r\n      this.popup.setLngLat(lngLat);\r\n    },\r\n\r\n    showed(next, prev) {\r\n      if (next !== prev) {\r\n        this.open = next;\r\n        if (this.marker) {\r\n          this.marker.togglePopup();\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.popup = new this.mapbox.Popup(this.$props);\r\n  },\r\n\r\n  mounted() {\r\n    this.$_addPopup();\r\n    this.initial = false;\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.map) {\r\n      this.popup.remove();\r\n      this.$_emitEvent(\"removed\");\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    $_addPopup() {\r\n      this.popup = new this.mapbox.Popup(this.$props);\r\n      if (this.coordinates !== undefined) {\r\n        this.popup.setLngLat(this.coordinates);\r\n      }\r\n      if (this.$slots.default !== undefined) {\r\n        if (this.onlyText) {\r\n          if (this.$slots.default[0].elm.nodeType === 3) {\r\n            let tmpEl = document.createElement(\"span\");\r\n            tmpEl.appendChild(this.$slots.default[0].elm);\r\n            this.popup.setText(tmpEl.innerText);\r\n          } else {\r\n            this.popup.setText(this.$slots.default[0].elm.innerText);\r\n          }\r\n        } else {\r\n          this.popup.setDOMContent(this.$slots.default[0].elm);\r\n        }\r\n      }\r\n\r\n      this.$_bindSelfEvents(Object.keys(popupEvents), this.popup);\r\n\r\n      this.$_emitEvent(\"added\", { popup: this.popup });\r\n\r\n      if (this.marker) {\r\n        this.marker.setPopup(this.popup);\r\n      }\r\n      if (this.showed) {\r\n        this.open = true;\r\n\r\n        if (this.marker) {\r\n          this.marker.togglePopup();\r\n        }\r\n      }\r\n    },\r\n\r\n    $_emitSelfEvent(event) {\r\n      this.$_emitMapEvent(event, { popup: this.popup });\r\n    },\r\n\r\n    remove() {\r\n      this.popup.remove();\r\n      this.$_emitEvent(\"remove\", { popup: this.popup });\r\n    }\r\n  }\r\n};\r\n</script>\r\n"]}]}